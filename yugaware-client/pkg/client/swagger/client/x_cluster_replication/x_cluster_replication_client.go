// Code generated by go-swagger; DO NOT EDIT.

package x_cluster_replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new x cluster replication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for x cluster replication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateXcluster(params *CreateXclusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateXclusterOK, error)

	DeleteXcluster(params *DeleteXclusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteXclusterOK, error)

	Edit(params *EditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditOK, error)

	Pause(params *PauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseOK, error)

	Resume(params *ResumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateXcluster creates x cluster replication
*/
func (a *Client) CreateXcluster(params *CreateXclusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateXclusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateXclusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_xcluster",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/xcluster_replication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateXclusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateXclusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_xcluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteXcluster deletes x cluster replication
*/
func (a *Client) DeleteXcluster(params *DeleteXclusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteXclusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteXclusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_xcluster",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/xcluster_replication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteXclusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteXclusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_xcluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Edit edits x cluster replication
*/
func (a *Client) Edit(params *EditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "edit",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/xcluster_replication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for edit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Pause pauses x cluster replication
*/
func (a *Client) Pause(params *PauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pause",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/pause_xcluster_replication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PauseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Resume resumes x cluster replication
*/
func (a *Client) Resume(params *ResumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resume",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/resume_xcluster_replication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
