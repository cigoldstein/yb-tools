// Code generated by go-swagger; DO NOT EDIT.

package schedule_external_script

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new schedule external script API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for schedule external script API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ExternalScriptSchedule(params *ExternalScriptScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	StopScheduledScript(params *StopScheduledScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	UpdateScheduledScript(params *UpdateScheduledScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  ExternalScriptSchedule external script schedule API
*/
func (a *Client) ExternalScriptSchedule(params *ExternalScriptScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExternalScriptScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "externalScriptSchedule",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/schedule_script",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExternalScriptScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  StopScheduledScript stop scheduled script API
*/
func (a *Client) StopScheduledScript(params *StopScheduledScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopScheduledScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopScheduledScript",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/stop_scheduled_script",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopScheduledScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  UpdateScheduledScript update scheduled script API
*/
func (a *Client) UpdateScheduledScript(params *UpdateScheduledScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScheduledScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateScheduledScript",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/update_scheduled_script",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateScheduledScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
