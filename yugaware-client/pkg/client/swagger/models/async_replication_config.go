// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AsyncReplicationConfig async replication config
//
// swagger:model AsyncReplicationConfig
type AsyncReplicationConfig struct {

	// active
	// Required: true
	Active *bool `json:"active"`

	// source table ID
	// Required: true
	SourceTableID *string `json:"sourceTableID"`

	// source universe UUID
	// Required: true
	// Format: uuid
	SourceUniverseUUID *strfmt.UUID `json:"sourceUniverseUUID"`

	// target table ID
	// Required: true
	TargetTableID *string `json:"targetTableID"`

	// target universe UUID
	// Required: true
	// Format: uuid
	TargetUniverseUUID *strfmt.UUID `json:"targetUniverseUUID"`
}

// Validate validates this async replication config
func (m *AsyncReplicationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceTableID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetTableID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AsyncReplicationConfig) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *AsyncReplicationConfig) validateSourceTableID(formats strfmt.Registry) error {

	if err := validate.Required("sourceTableID", "body", m.SourceTableID); err != nil {
		return err
	}

	return nil
}

func (m *AsyncReplicationConfig) validateSourceUniverseUUID(formats strfmt.Registry) error {

	if err := validate.Required("sourceUniverseUUID", "body", m.SourceUniverseUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("sourceUniverseUUID", "body", "uuid", m.SourceUniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AsyncReplicationConfig) validateTargetTableID(formats strfmt.Registry) error {

	if err := validate.Required("targetTableID", "body", m.TargetTableID); err != nil {
		return err
	}

	return nil
}

func (m *AsyncReplicationConfig) validateTargetUniverseUUID(formats strfmt.Registry) error {

	if err := validate.Required("targetUniverseUUID", "body", m.TargetUniverseUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("targetUniverseUUID", "body", "uuid", m.TargetUniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this async replication config based on context it is used
func (m *AsyncReplicationConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AsyncReplicationConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AsyncReplicationConfig) UnmarshalBinary(b []byte) error {
	var res AsyncReplicationConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
