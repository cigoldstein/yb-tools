// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportUniverseFormData import universe form data
//
// swagger:model ImportUniverseFormData
type ImportUniverseFormData struct {

	// cloud name
	// Required: true
	CloudName *string `json:"cloudName"`

	// cloud provider type
	// Required: true
	CloudProviderType *string `json:"cloudProviderType"`

	// current state
	// Required: true
	// Enum: [BEGIN IMPORTED_MASTERS IMPORTED_TSERVERS FINISHED]
	CurrentState *string `json:"currentState"`

	// instance type
	// Required: true
	InstanceType *string `json:"instanceType"`

	// master addresses
	// Required: true
	MasterAddresses *string `json:"masterAddresses"`

	// provider type
	// Required: true
	// Enum: [unknown aws gcp azu docker onprem kubernetes local other]
	ProviderType *string `json:"providerType"`

	// region code
	// Required: true
	RegionCode *string `json:"regionCode"`

	// region name
	// Required: true
	RegionName *string `json:"regionName"`

	// replication factor
	// Required: true
	ReplicationFactor *int32 `json:"replicationFactor"`

	// single step
	// Required: true
	SingleStep *bool `json:"singleStep"`

	// universe name
	// Required: true
	UniverseName *string `json:"universeName"`

	// universe UUID
	// Required: true
	// Format: uuid
	UniverseUUID *strfmt.UUID `json:"universeUUID"`

	// zone code
	// Required: true
	ZoneCode *string `json:"zoneCode"`

	// zone name
	// Required: true
	ZoneName *string `json:"zoneName"`
}

// Validate validates this import universe form data
func (m *ImportUniverseFormData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProviderType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationFactor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleStep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportUniverseFormData) validateCloudName(formats strfmt.Registry) error {

	if err := validate.Required("cloudName", "body", m.CloudName); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateCloudProviderType(formats strfmt.Registry) error {

	if err := validate.Required("cloudProviderType", "body", m.CloudProviderType); err != nil {
		return err
	}

	return nil
}

var importUniverseFormDataTypeCurrentStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BEGIN","IMPORTED_MASTERS","IMPORTED_TSERVERS","FINISHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importUniverseFormDataTypeCurrentStatePropEnum = append(importUniverseFormDataTypeCurrentStatePropEnum, v)
	}
}

const (

	// ImportUniverseFormDataCurrentStateBEGIN captures enum value "BEGIN"
	ImportUniverseFormDataCurrentStateBEGIN string = "BEGIN"

	// ImportUniverseFormDataCurrentStateIMPORTEDMASTERS captures enum value "IMPORTED_MASTERS"
	ImportUniverseFormDataCurrentStateIMPORTEDMASTERS string = "IMPORTED_MASTERS"

	// ImportUniverseFormDataCurrentStateIMPORTEDTSERVERS captures enum value "IMPORTED_TSERVERS"
	ImportUniverseFormDataCurrentStateIMPORTEDTSERVERS string = "IMPORTED_TSERVERS"

	// ImportUniverseFormDataCurrentStateFINISHED captures enum value "FINISHED"
	ImportUniverseFormDataCurrentStateFINISHED string = "FINISHED"
)

// prop value enum
func (m *ImportUniverseFormData) validateCurrentStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, importUniverseFormDataTypeCurrentStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImportUniverseFormData) validateCurrentState(formats strfmt.Registry) error {

	if err := validate.Required("currentState", "body", m.CurrentState); err != nil {
		return err
	}

	// value enum
	if err := m.validateCurrentStateEnum("currentState", "body", *m.CurrentState); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateMasterAddresses(formats strfmt.Registry) error {

	if err := validate.Required("masterAddresses", "body", m.MasterAddresses); err != nil {
		return err
	}

	return nil
}

var importUniverseFormDataTypeProviderTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","aws","gcp","azu","docker","onprem","kubernetes","local","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importUniverseFormDataTypeProviderTypePropEnum = append(importUniverseFormDataTypeProviderTypePropEnum, v)
	}
}

const (

	// ImportUniverseFormDataProviderTypeUnknown captures enum value "unknown"
	ImportUniverseFormDataProviderTypeUnknown string = "unknown"

	// ImportUniverseFormDataProviderTypeAws captures enum value "aws"
	ImportUniverseFormDataProviderTypeAws string = "aws"

	// ImportUniverseFormDataProviderTypeGcp captures enum value "gcp"
	ImportUniverseFormDataProviderTypeGcp string = "gcp"

	// ImportUniverseFormDataProviderTypeAzu captures enum value "azu"
	ImportUniverseFormDataProviderTypeAzu string = "azu"

	// ImportUniverseFormDataProviderTypeDocker captures enum value "docker"
	ImportUniverseFormDataProviderTypeDocker string = "docker"

	// ImportUniverseFormDataProviderTypeOnprem captures enum value "onprem"
	ImportUniverseFormDataProviderTypeOnprem string = "onprem"

	// ImportUniverseFormDataProviderTypeKubernetes captures enum value "kubernetes"
	ImportUniverseFormDataProviderTypeKubernetes string = "kubernetes"

	// ImportUniverseFormDataProviderTypeLocal captures enum value "local"
	ImportUniverseFormDataProviderTypeLocal string = "local"

	// ImportUniverseFormDataProviderTypeOther captures enum value "other"
	ImportUniverseFormDataProviderTypeOther string = "other"
)

// prop value enum
func (m *ImportUniverseFormData) validateProviderTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, importUniverseFormDataTypeProviderTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImportUniverseFormData) validateProviderType(formats strfmt.Registry) error {

	if err := validate.Required("providerType", "body", m.ProviderType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProviderTypeEnum("providerType", "body", *m.ProviderType); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateRegionCode(formats strfmt.Registry) error {

	if err := validate.Required("regionCode", "body", m.RegionCode); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateRegionName(formats strfmt.Registry) error {

	if err := validate.Required("regionName", "body", m.RegionName); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateReplicationFactor(formats strfmt.Registry) error {

	if err := validate.Required("replicationFactor", "body", m.ReplicationFactor); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateSingleStep(formats strfmt.Registry) error {

	if err := validate.Required("singleStep", "body", m.SingleStep); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateUniverseName(formats strfmt.Registry) error {

	if err := validate.Required("universeName", "body", m.UniverseName); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateUniverseUUID(formats strfmt.Registry) error {

	if err := validate.Required("universeUUID", "body", m.UniverseUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateZoneCode(formats strfmt.Registry) error {

	if err := validate.Required("zoneCode", "body", m.ZoneCode); err != nil {
		return err
	}

	return nil
}

func (m *ImportUniverseFormData) validateZoneName(formats strfmt.Registry) error {

	if err := validate.Required("zoneName", "body", m.ZoneName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this import universe form data based on context it is used
func (m *ImportUniverseFormData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImportUniverseFormData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportUniverseFormData) UnmarshalBinary(b []byte) error {
	var res ImportUniverseFormData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
