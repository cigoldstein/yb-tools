// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// YBPTask y b p task
//
// swagger:model YBPTask
type YBPTask struct {

	// UUID of the resource being modified by the task
	// Read Only: true
	// Format: uuid
	ResourceUUID strfmt.UUID `json:"resourceUUID,omitempty"`

	// Task UUID
	// Read Only: true
	// Format: uuid
	TaskUUID strfmt.UUID `json:"taskUUID,omitempty"`
}

// Validate validates this y b p task
func (m *YBPTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *YBPTask) validateResourceUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("resourceUUID", "body", "uuid", m.ResourceUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *YBPTask) validateTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("taskUUID", "body", "uuid", m.TaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this y b p task based on the context it is used
func (m *YBPTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *YBPTask) contextValidateResourceUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "resourceUUID", "body", strfmt.UUID(m.ResourceUUID)); err != nil {
		return err
	}

	return nil
}

func (m *YBPTask) contextValidateTaskUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "taskUUID", "body", strfmt.UUID(m.TaskUUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *YBPTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *YBPTask) UnmarshalBinary(b []byte) error {
	var res YBPTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
