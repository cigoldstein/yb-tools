// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UniverseConfigureTaskParams universe configure task params
//
// swagger:model UniverseConfigureTaskParams
type UniverseConfigureTaskParams struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// cluster operation
	// Enum: [CREATE EDIT DELETE]
	ClusterOperation string `json:"clusterOperation,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// The source universe's sync replication relationships
	// Read Only: true
	SourceAsyncReplicationRelationships []*AsyncReplicationConfig `json:"sourceAsyncReplicationRelationships"`

	// The target universe's async replication relationships
	// Read Only: true
	TargetAsyncReplicationRelationships []*AsyncReplicationConfig `json:"targetAsyncReplicationRelationships"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this universe configure task params
func (m *UniverseConfigureTaskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceAsyncReplicationRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetAsyncReplicationRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var universeConfigureTaskParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeConfigureTaskParamsTypeCapabilityPropEnum = append(universeConfigureTaskParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// UniverseConfigureTaskParamsCapabilityREADONLY captures enum value "READ_ONLY"
	UniverseConfigureTaskParamsCapabilityREADONLY string = "READ_ONLY"

	// UniverseConfigureTaskParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	UniverseConfigureTaskParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *UniverseConfigureTaskParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeConfigureTaskParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseConfigureTaskParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

var universeConfigureTaskParamsTypeClusterOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","EDIT","DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeConfigureTaskParamsTypeClusterOperationPropEnum = append(universeConfigureTaskParamsTypeClusterOperationPropEnum, v)
	}
}

const (

	// UniverseConfigureTaskParamsClusterOperationCREATE captures enum value "CREATE"
	UniverseConfigureTaskParamsClusterOperationCREATE string = "CREATE"

	// UniverseConfigureTaskParamsClusterOperationEDIT captures enum value "EDIT"
	UniverseConfigureTaskParamsClusterOperationEDIT string = "EDIT"

	// UniverseConfigureTaskParamsClusterOperationDELETE captures enum value "DELETE"
	UniverseConfigureTaskParamsClusterOperationDELETE string = "DELETE"
)

// prop value enum
func (m *UniverseConfigureTaskParams) validateClusterOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeConfigureTaskParamsTypeClusterOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseConfigureTaskParams) validateClusterOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterOperation) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterOperationEnum("clusterOperation", "body", m.ClusterOperation); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var universeConfigureTaskParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeConfigureTaskParamsTypeCurrentClusterTypePropEnum = append(universeConfigureTaskParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// UniverseConfigureTaskParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	UniverseConfigureTaskParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// UniverseConfigureTaskParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	UniverseConfigureTaskParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *UniverseConfigureTaskParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeConfigureTaskParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseConfigureTaskParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

var universeConfigureTaskParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeConfigureTaskParamsTypeImportedStatePropEnum = append(universeConfigureTaskParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// UniverseConfigureTaskParamsImportedStateNONE captures enum value "NONE"
	UniverseConfigureTaskParamsImportedStateNONE string = "NONE"

	// UniverseConfigureTaskParamsImportedStateSTARTED captures enum value "STARTED"
	UniverseConfigureTaskParamsImportedStateSTARTED string = "STARTED"

	// UniverseConfigureTaskParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	UniverseConfigureTaskParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// UniverseConfigureTaskParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	UniverseConfigureTaskParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// UniverseConfigureTaskParamsImportedStateIMPORTED captures enum value "IMPORTED"
	UniverseConfigureTaskParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *UniverseConfigureTaskParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeConfigureTaskParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseConfigureTaskParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateSourceAsyncReplicationRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceAsyncReplicationRelationships) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceAsyncReplicationRelationships); i++ {
		if swag.IsZero(m.SourceAsyncReplicationRelationships[i]) { // not required
			continue
		}

		if m.SourceAsyncReplicationRelationships[i] != nil {
			if err := m.SourceAsyncReplicationRelationships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceAsyncReplicationRelationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateTargetAsyncReplicationRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetAsyncReplicationRelationships) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetAsyncReplicationRelationships); i++ {
		if swag.IsZero(m.TargetAsyncReplicationRelationships[i]) { // not required
			continue
		}

		if m.TargetAsyncReplicationRelationships[i] != nil {
			if err := m.TargetAsyncReplicationRelationships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetAsyncReplicationRelationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this universe configure task params based on the context it is used
func (m *UniverseConfigureTaskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceAsyncReplicationRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetAsyncReplicationRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateSourceAsyncReplicationRelationships(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceAsyncReplicationRelationships", "body", []*AsyncReplicationConfig(m.SourceAsyncReplicationRelationships)); err != nil {
		return err
	}

	for i := 0; i < len(m.SourceAsyncReplicationRelationships); i++ {

		if m.SourceAsyncReplicationRelationships[i] != nil {
			if err := m.SourceAsyncReplicationRelationships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceAsyncReplicationRelationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateTargetAsyncReplicationRelationships(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetAsyncReplicationRelationships", "body", []*AsyncReplicationConfig(m.TargetAsyncReplicationRelationships)); err != nil {
		return err
	}

	for i := 0; i < len(m.TargetAsyncReplicationRelationships); i++ {

		if m.TargetAsyncReplicationRelationships[i] != nil {
			if err := m.TargetAsyncReplicationRelationships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetAsyncReplicationRelationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UniverseConfigureTaskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UniverseConfigureTaskParams) UnmarshalBinary(b []byte) error {
	var res UniverseConfigureTaskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
