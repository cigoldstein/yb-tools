// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseFormData Specification for release locations
//
// swagger:model ReleaseFormData
type ReleaseFormData struct {

	// gcs
	// Required: true
	Gcs *GCSLocation `json:"gcs"`

	// http
	// Required: true
	HTTP *HTTPLocation `json:"http"`

	// s3
	// Required: true
	S3 *S3Location `json:"s3"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this release form data
func (m *ReleaseFormData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGcs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseFormData) validateGcs(formats strfmt.Registry) error {

	if err := validate.Required("gcs", "body", m.Gcs); err != nil {
		return err
	}

	if m.Gcs != nil {
		if err := m.Gcs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcs")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseFormData) validateHTTP(formats strfmt.Registry) error {

	if err := validate.Required("http", "body", m.HTTP); err != nil {
		return err
	}

	if m.HTTP != nil {
		if err := m.HTTP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseFormData) validateS3(formats strfmt.Registry) error {

	if err := validate.Required("s3", "body", m.S3); err != nil {
		return err
	}

	if m.S3 != nil {
		if err := m.S3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseFormData) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this release form data based on the context it is used
func (m *ReleaseFormData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGcs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseFormData) contextValidateGcs(ctx context.Context, formats strfmt.Registry) error {

	if m.Gcs != nil {
		if err := m.Gcs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcs")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseFormData) contextValidateHTTP(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTP != nil {
		if err := m.HTTP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseFormData) contextValidateS3(ctx context.Context, formats strfmt.Registry) error {

	if m.S3 != nil {
		if err := m.S3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseFormData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseFormData) UnmarshalBinary(b []byte) error {
	var res ReleaseFormData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
