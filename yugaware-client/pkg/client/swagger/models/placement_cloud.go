// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlacementCloud placement cloud
//
// swagger:model PlacementCloud
type PlacementCloud struct {

	// code
	Code string `json:"code,omitempty"`

	// default region
	// Format: uuid
	DefaultRegion strfmt.UUID `json:"defaultRegion,omitempty"`

	// region list
	RegionList []*PlacementRegion `json:"regionList"`

	// uuid
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this placement cloud
func (m *PlacementCloud) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlacementCloud) validateDefaultRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultRegion) { // not required
		return nil
	}

	if err := validate.FormatOf("defaultRegion", "body", "uuid", m.DefaultRegion.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PlacementCloud) validateRegionList(formats strfmt.Registry) error {
	if swag.IsZero(m.RegionList) { // not required
		return nil
	}

	for i := 0; i < len(m.RegionList); i++ {
		if swag.IsZero(m.RegionList[i]) { // not required
			continue
		}

		if m.RegionList[i] != nil {
			if err := m.RegionList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regionList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regionList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlacementCloud) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this placement cloud based on the context it is used
func (m *PlacementCloud) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegionList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlacementCloud) contextValidateRegionList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegionList); i++ {

		if m.RegionList[i] != nil {
			if err := m.RegionList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regionList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regionList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlacementCloud) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlacementCloud) UnmarshalBinary(b []byte) error {
	var res PlacementCloud
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
