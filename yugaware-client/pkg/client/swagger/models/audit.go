// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Audit Audit logging for requests and responses
//
// swagger:model Audit
type Audit struct {

	// API call
	// Example: /api/v1/customers/\u003c496fdea8-df25-11eb-ba80-0242ac130004\u003e/providers
	// Read Only: true
	APICall string `json:"apiCall,omitempty"`

	// API method
	// Example: GET
	// Read Only: true
	APIMethod string `json:"apiMethod,omitempty"`

	// audit ID
	// Required: true
	AuditID *int64 `json:"auditID"`

	// Customer UUID
	// Read Only: true
	// Format: uuid
	CustomerUUID strfmt.UUID `json:"customerUUID,omitempty"`

	// Audit UUID
	// Read Only: true
	Payload interface{} `json:"payload,omitempty"`

	// Task UUID
	// Read Only: true
	// Format: uuid
	TaskUUID strfmt.UUID `json:"taskUUID,omitempty"`

	// timestamp
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`

	// User UUID
	// Read Only: true
	// Format: uuid
	UserUUID strfmt.UUID `json:"userUUID,omitempty"`
}

// Validate validates this audit
func (m *Audit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Audit) validateAuditID(formats strfmt.Registry) error {

	if err := validate.Required("auditID", "body", m.AuditID); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateCustomerUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("customerUUID", "body", "uuid", m.CustomerUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("taskUUID", "body", "uuid", m.TaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateUserUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("userUUID", "body", "uuid", m.UserUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this audit based on the context it is used
func (m *Audit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPICall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPIMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Audit) contextValidateAPICall(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "apiCall", "body", string(m.APICall)); err != nil {
		return err
	}

	return nil
}

func (m *Audit) contextValidateAPIMethod(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "apiMethod", "body", string(m.APIMethod)); err != nil {
		return err
	}

	return nil
}

func (m *Audit) contextValidateCustomerUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customerUUID", "body", strfmt.UUID(m.CustomerUUID)); err != nil {
		return err
	}

	return nil
}

func (m *Audit) contextValidateTaskUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "taskUUID", "body", strfmt.UUID(m.TaskUUID)); err != nil {
		return err
	}

	return nil
}

func (m *Audit) contextValidateUserUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "userUUID", "body", strfmt.UUID(m.UserUUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Audit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Audit) UnmarshalBinary(b []byte) error {
	var res Audit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
