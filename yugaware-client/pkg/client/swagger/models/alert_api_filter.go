// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertAPIFilter alert Api filter
//
// swagger:model AlertApiFilter
type AlertAPIFilter struct {

	// configuration types
	// Required: true
	// Unique: true
	ConfigurationTypes []string `json:"configurationTypes"`

	// configuration Uuid
	// Required: true
	// Format: uuid
	ConfigurationUUID *strfmt.UUID `json:"configurationUuid"`

	// severities
	// Required: true
	// Unique: true
	Severities []string `json:"severities"`

	// source name
	// Required: true
	SourceName *string `json:"sourceName"`

	// source u UI ds
	// Required: true
	// Unique: true
	SourceUUIDs []strfmt.UUID `json:"sourceUUIDs"`

	// states
	// Required: true
	// Unique: true
	States []string `json:"states"`

	// uuids
	// Required: true
	// Unique: true
	Uuids []strfmt.UUID `json:"uuids"`
}

// Validate validates this alert Api filter
func (m *AlertAPIFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurationUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceUUIDs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUuids(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var alertApiFilterConfigurationTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PLATFORM","UNIVERSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertApiFilterConfigurationTypesItemsEnum = append(alertApiFilterConfigurationTypesItemsEnum, v)
	}
}

func (m *AlertAPIFilter) validateConfigurationTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertApiFilterConfigurationTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertAPIFilter) validateConfigurationTypes(formats strfmt.Registry) error {

	if err := validate.Required("configurationTypes", "body", m.ConfigurationTypes); err != nil {
		return err
	}

	if err := validate.UniqueItems("configurationTypes", "body", m.ConfigurationTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.ConfigurationTypes); i++ {

		// value enum
		if err := m.validateConfigurationTypesItemsEnum("configurationTypes"+"."+strconv.Itoa(i), "body", m.ConfigurationTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *AlertAPIFilter) validateConfigurationUUID(formats strfmt.Registry) error {

	if err := validate.Required("configurationUuid", "body", m.ConfigurationUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("configurationUuid", "body", "uuid", m.ConfigurationUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var alertApiFilterSeveritiesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEVERE","WARNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertApiFilterSeveritiesItemsEnum = append(alertApiFilterSeveritiesItemsEnum, v)
	}
}

func (m *AlertAPIFilter) validateSeveritiesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertApiFilterSeveritiesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertAPIFilter) validateSeverities(formats strfmt.Registry) error {

	if err := validate.Required("severities", "body", m.Severities); err != nil {
		return err
	}

	if err := validate.UniqueItems("severities", "body", m.Severities); err != nil {
		return err
	}

	for i := 0; i < len(m.Severities); i++ {

		// value enum
		if err := m.validateSeveritiesItemsEnum("severities"+"."+strconv.Itoa(i), "body", m.Severities[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *AlertAPIFilter) validateSourceName(formats strfmt.Registry) error {

	if err := validate.Required("sourceName", "body", m.SourceName); err != nil {
		return err
	}

	return nil
}

func (m *AlertAPIFilter) validateSourceUUIDs(formats strfmt.Registry) error {

	if err := validate.Required("sourceUUIDs", "body", m.SourceUUIDs); err != nil {
		return err
	}

	if err := validate.UniqueItems("sourceUUIDs", "body", m.SourceUUIDs); err != nil {
		return err
	}

	for i := 0; i < len(m.SourceUUIDs); i++ {

		if err := validate.FormatOf("sourceUUIDs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceUUIDs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

var alertApiFilterStatesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","ACKNOWLEDGED","SUSPENDED","RESOLVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertApiFilterStatesItemsEnum = append(alertApiFilterStatesItemsEnum, v)
	}
}

func (m *AlertAPIFilter) validateStatesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertApiFilterStatesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertAPIFilter) validateStates(formats strfmt.Registry) error {

	if err := validate.Required("states", "body", m.States); err != nil {
		return err
	}

	if err := validate.UniqueItems("states", "body", m.States); err != nil {
		return err
	}

	for i := 0; i < len(m.States); i++ {

		// value enum
		if err := m.validateStatesItemsEnum("states"+"."+strconv.Itoa(i), "body", m.States[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *AlertAPIFilter) validateUuids(formats strfmt.Registry) error {

	if err := validate.Required("uuids", "body", m.Uuids); err != nil {
		return err
	}

	if err := validate.UniqueItems("uuids", "body", m.Uuids); err != nil {
		return err
	}

	for i := 0; i < len(m.Uuids); i++ {

		if err := validate.FormatOf("uuids"+"."+strconv.Itoa(i), "body", "uuid", m.Uuids[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this alert Api filter based on context it is used
func (m *AlertAPIFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AlertAPIFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertAPIFilter) UnmarshalBinary(b []byte) error {
	var res AlertAPIFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
