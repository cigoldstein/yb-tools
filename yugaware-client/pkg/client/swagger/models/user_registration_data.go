// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserRegistrationData User registration data. The API and UI use this to validate form data.
//
// swagger:model UserRegistrationData
type UserRegistrationData struct {

	// Password confirmation
	// Example: Test@1234
	ConfirmPassword string `json:"confirmPassword,omitempty"`

	// Email address
	// Example: test@example.com
	// Required: true
	Email *string `json:"email"`

	// User features
	Features map[string]interface{} `json:"features,omitempty"`

	// Password
	// Example: Test@1234
	Password string `json:"password,omitempty"`

	// User role
	// Example: Admin
	// Required: true
	// Enum: [Admin ReadOnly SuperAdmin BackupAdmin]
	Role *string `json:"role"`
}

// Validate validates this user registration data
func (m *UserRegistrationData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserRegistrationData) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

var userRegistrationDataTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Admin","ReadOnly","SuperAdmin","BackupAdmin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userRegistrationDataTypeRolePropEnum = append(userRegistrationDataTypeRolePropEnum, v)
	}
}

const (

	// UserRegistrationDataRoleAdmin captures enum value "Admin"
	UserRegistrationDataRoleAdmin string = "Admin"

	// UserRegistrationDataRoleReadOnly captures enum value "ReadOnly"
	UserRegistrationDataRoleReadOnly string = "ReadOnly"

	// UserRegistrationDataRoleSuperAdmin captures enum value "SuperAdmin"
	UserRegistrationDataRoleSuperAdmin string = "SuperAdmin"

	// UserRegistrationDataRoleBackupAdmin captures enum value "BackupAdmin"
	UserRegistrationDataRoleBackupAdmin string = "BackupAdmin"
)

// prop value enum
func (m *UserRegistrationData) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userRegistrationDataTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserRegistrationData) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user registration data based on context it is used
func (m *UserRegistrationData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserRegistrationData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserRegistrationData) UnmarshalBinary(b []byte) error {
	var res UserRegistrationData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
