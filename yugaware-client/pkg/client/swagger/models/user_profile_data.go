// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserProfileData User profile data. The API and UI use this to validate form data.
//
// swagger:model UserProfileData
type UserProfileData struct {

	// Password confirmation
	// Example: Test@1234
	ConfirmPassword string `json:"confirmPassword,omitempty"`

	// Password
	// Example: Test@1234
	Password string `json:"password,omitempty"`

	// User role
	// Example: Admin
	// Required: true
	// Enum: [Admin ReadOnly SuperAdmin BackupAdmin]
	Role *string `json:"role"`

	// User timezone
	// Example: America/Toronto
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this user profile data
func (m *UserProfileData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userProfileDataTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Admin","ReadOnly","SuperAdmin","BackupAdmin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userProfileDataTypeRolePropEnum = append(userProfileDataTypeRolePropEnum, v)
	}
}

const (

	// UserProfileDataRoleAdmin captures enum value "Admin"
	UserProfileDataRoleAdmin string = "Admin"

	// UserProfileDataRoleReadOnly captures enum value "ReadOnly"
	UserProfileDataRoleReadOnly string = "ReadOnly"

	// UserProfileDataRoleSuperAdmin captures enum value "SuperAdmin"
	UserProfileDataRoleSuperAdmin string = "SuperAdmin"

	// UserProfileDataRoleBackupAdmin captures enum value "BackupAdmin"
	UserProfileDataRoleBackupAdmin string = "BackupAdmin"
)

// prop value enum
func (m *UserProfileData) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userProfileDataTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserProfileData) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user profile data based on context it is used
func (m *UserProfileData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserProfileData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserProfileData) UnmarshalBinary(b []byte) error {
	var res UserProfileData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
