// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// XClusterConfig xcluster config object
//
// swagger:model XClusterConfig
type XClusterConfig struct {

	// Create time
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// Modify time
	// Format: date-time
	ModifyTime strfmt.DateTime `json:"modifyTime,omitempty"`

	// Name
	Name string `json:"name,omitempty"`

	// Source Universe UUID
	// Format: uuid
	SourceUniverseUUID strfmt.UUID `json:"sourceUniverseUUID,omitempty"`

	// Status
	// Enum: [Init Running Updating Paused Failed]
	Status string `json:"status,omitempty"`

	// Source Universe table IDs
	// Unique: true
	Tables []string `json:"tables"`

	// Target Universe UUID
	// Format: uuid
	TargetUniverseUUID strfmt.UUID `json:"targetUniverseUUID,omitempty"`

	// UUID
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this x cluster config
func (m *XClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifyTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *XClusterConfig) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfig) validateModifyTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifyTime) { // not required
		return nil
	}

	if err := validate.FormatOf("modifyTime", "body", "date-time", m.ModifyTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfig) validateSourceUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceUniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("sourceUniverseUUID", "body", "uuid", m.SourceUniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var xClusterConfigTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Init","Running","Updating","Paused","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		xClusterConfigTypeStatusPropEnum = append(xClusterConfigTypeStatusPropEnum, v)
	}
}

const (

	// XClusterConfigStatusInit captures enum value "Init"
	XClusterConfigStatusInit string = "Init"

	// XClusterConfigStatusRunning captures enum value "Running"
	XClusterConfigStatusRunning string = "Running"

	// XClusterConfigStatusUpdating captures enum value "Updating"
	XClusterConfigStatusUpdating string = "Updating"

	// XClusterConfigStatusPaused captures enum value "Paused"
	XClusterConfigStatusPaused string = "Paused"

	// XClusterConfigStatusFailed captures enum value "Failed"
	XClusterConfigStatusFailed string = "Failed"
)

// prop value enum
func (m *XClusterConfig) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, xClusterConfigTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *XClusterConfig) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfig) validateTables(formats strfmt.Registry) error {
	if swag.IsZero(m.Tables) { // not required
		return nil
	}

	if err := validate.UniqueItems("tables", "body", m.Tables); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfig) validateTargetUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetUniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("targetUniverseUUID", "body", "uuid", m.TargetUniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfig) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this x cluster config based on context it is used
func (m *XClusterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *XClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *XClusterConfig) UnmarshalBinary(b []byte) error {
	var res XClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
