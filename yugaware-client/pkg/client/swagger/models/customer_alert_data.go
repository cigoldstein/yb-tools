// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerAlertData Format of an alert, used by the API and UI to validate data against input constraints
//
// swagger:model CustomerAlertData
type CustomerAlertData struct {

	// alerting data
	// Required: true
	AlertingData *AlertingData `json:"alertingData"`

	// callhome level
	// Required: true
	CallhomeLevel *string `json:"callhomeLevel"`

	// Alert code
	Code string `json:"code,omitempty"`

	// Email password confirmation
	// Example: XurenRknsc
	ConfirmPassword string `json:"confirmPassword,omitempty"`

	// Alert email address
	// Example: test@example.com
	Email string `json:"email,omitempty"`

	// Features
	Features map[string]interface{} `json:"features,omitempty"`

	// Alert name
	// Example: Test alert
	Name string `json:"name,omitempty"`

	// Email password
	// Example: XurenRknsc
	Password string `json:"password,omitempty"`

	// smtp data
	// Required: true
	SMTPData *SMTPData `json:"smtpData"`
}

// Validate validates this customer alert data
func (m *CustomerAlertData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertingData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallhomeLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerAlertData) validateAlertingData(formats strfmt.Registry) error {

	if err := validate.Required("alertingData", "body", m.AlertingData); err != nil {
		return err
	}

	if m.AlertingData != nil {
		if err := m.AlertingData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertingData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertingData")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerAlertData) validateCallhomeLevel(formats strfmt.Registry) error {

	if err := validate.Required("callhomeLevel", "body", m.CallhomeLevel); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAlertData) validateSMTPData(formats strfmt.Registry) error {

	if err := validate.Required("smtpData", "body", m.SMTPData); err != nil {
		return err
	}

	if m.SMTPData != nil {
		if err := m.SMTPData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtpData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtpData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this customer alert data based on the context it is used
func (m *CustomerAlertData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertingData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSMTPData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerAlertData) contextValidateAlertingData(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertingData != nil {
		if err := m.AlertingData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertingData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertingData")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerAlertData) contextValidateSMTPData(ctx context.Context, formats strfmt.Registry) error {

	if m.SMTPData != nil {
		if err := m.SMTPData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtpData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtpData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerAlertData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerAlertData) UnmarshalBinary(b []byte) error {
	var res CustomerAlertData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
