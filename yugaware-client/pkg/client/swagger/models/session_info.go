// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SessionInfo Session information
//
// swagger:model SessionInfo
type SessionInfo struct {

	// API token
	APIToken string `json:"apiToken,omitempty"`

	// Auth token
	AuthToken string `json:"authToken,omitempty"`

	// Customer UUID
	// Format: uuid
	CustomerUUID strfmt.UUID `json:"customerUUID,omitempty"`

	// User UUID
	// Format: uuid
	UserUUID strfmt.UUID `json:"userUUID,omitempty"`
}

// Validate validates this session info
func (m *SessionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionInfo) validateCustomerUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("customerUUID", "body", "uuid", m.CustomerUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionInfo) validateUserUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("userUUID", "body", "uuid", m.UserUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this session info based on context it is used
func (m *SessionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SessionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionInfo) UnmarshalBinary(b []byte) error {
	var res SessionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
