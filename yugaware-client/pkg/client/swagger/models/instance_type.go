// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceType Information about an instance
//
// swagger:model InstanceType
type InstanceType struct {

	// True if the instance is active
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// id key
	// Required: true
	IDKey *InstanceTypeKey `json:"idKey"`

	// instance type code
	// Required: true
	InstanceTypeCode *string `json:"instanceTypeCode"`

	// instance type details
	// Required: true
	InstanceTypeDetails *InstanceTypeDetails `json:"instanceTypeDetails"`

	// The instance's memory size, in gigabytes
	MemSizeGB float64 `json:"memSizeGB,omitempty"`

	// The instance's number of CPU cores
	NumCores float64 `json:"numCores,omitempty"`

	// provider
	// Required: true
	Provider *Provider `json:"provider"`

	// provider code
	// Required: true
	ProviderCode *string `json:"providerCode"`

	// provider Uuid
	// Required: true
	// Format: uuid
	ProviderUUID *strfmt.UUID `json:"providerUuid"`
}

// Validate validates this instance type
func (m *InstanceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIDKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceTypeDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceType) validateIDKey(formats strfmt.Registry) error {

	if err := validate.Required("idKey", "body", m.IDKey); err != nil {
		return err
	}

	if m.IDKey != nil {
		if err := m.IDKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("idKey")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceType) validateInstanceTypeCode(formats strfmt.Registry) error {

	if err := validate.Required("instanceTypeCode", "body", m.InstanceTypeCode); err != nil {
		return err
	}

	return nil
}

func (m *InstanceType) validateInstanceTypeDetails(formats strfmt.Registry) error {

	if err := validate.Required("instanceTypeDetails", "body", m.InstanceTypeDetails); err != nil {
		return err
	}

	if m.InstanceTypeDetails != nil {
		if err := m.InstanceTypeDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceTypeDetails")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceType) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceType) validateProviderCode(formats strfmt.Registry) error {

	if err := validate.Required("providerCode", "body", m.ProviderCode); err != nil {
		return err
	}

	return nil
}

func (m *InstanceType) validateProviderUUID(formats strfmt.Registry) error {

	if err := validate.Required("providerUuid", "body", m.ProviderUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("providerUuid", "body", "uuid", m.ProviderUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this instance type based on the context it is used
func (m *InstanceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIDKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceTypeDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceType) contextValidateActive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *InstanceType) contextValidateIDKey(ctx context.Context, formats strfmt.Registry) error {

	if m.IDKey != nil {
		if err := m.IDKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("idKey")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceType) contextValidateInstanceTypeDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceTypeDetails != nil {
		if err := m.InstanceTypeDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceTypeDetails")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceType) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.Provider != nil {
		if err := m.Provider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceType) UnmarshalBinary(b []byte) error {
	var res InstanceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
