// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScopedConfig Scoped configuration
//
// swagger:model ScopedConfig
type ScopedConfig struct {

	// List of configurations
	ConfigEntries []*ConfigEntry `json:"configEntries"`

	// Mutability of the scope. Only super admin users can change global scope; other scopes are customer-mutable.
	MutableScope bool `json:"mutableScope,omitempty"`

	// Scope type
	// Enum: [GLOBAL CUSTOMER UNIVERSE PROVIDER]
	Type string `json:"type,omitempty"`

	// Scope UIID
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this scoped config
func (m *ScopedConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScopedConfig) validateConfigEntries(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigEntries); i++ {
		if swag.IsZero(m.ConfigEntries[i]) { // not required
			continue
		}

		if m.ConfigEntries[i] != nil {
			if err := m.ConfigEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var scopedConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GLOBAL","CUSTOMER","UNIVERSE","PROVIDER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scopedConfigTypeTypePropEnum = append(scopedConfigTypeTypePropEnum, v)
	}
}

const (

	// ScopedConfigTypeGLOBAL captures enum value "GLOBAL"
	ScopedConfigTypeGLOBAL string = "GLOBAL"

	// ScopedConfigTypeCUSTOMER captures enum value "CUSTOMER"
	ScopedConfigTypeCUSTOMER string = "CUSTOMER"

	// ScopedConfigTypeUNIVERSE captures enum value "UNIVERSE"
	ScopedConfigTypeUNIVERSE string = "UNIVERSE"

	// ScopedConfigTypePROVIDER captures enum value "PROVIDER"
	ScopedConfigTypePROVIDER string = "PROVIDER"
)

// prop value enum
func (m *ScopedConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scopedConfigTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScopedConfig) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ScopedConfig) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this scoped config based on the context it is used
func (m *ScopedConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigEntries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScopedConfig) contextValidateConfigEntries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConfigEntries); i++ {

		if m.ConfigEntries[i] != nil {
			if err := m.ConfigEntries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScopedConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScopedConfig) UnmarshalBinary(b []byte) error {
	var res ScopedConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
