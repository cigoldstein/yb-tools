// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UniverseResp Universe-creation response
//
// swagger:model UniverseResp
type UniverseResp struct {

	// Universe creation date
	CreationDate string `json:"creationDate,omitempty"`

	// DNS name
	DNSName string `json:"dnsName,omitempty"`

	// Universe name
	Name string `json:"name,omitempty"`

	// Price
	PricePerHour float64 `json:"pricePerHour,omitempty"`

	// Universe resource details
	Resources *UniverseResourceDetails `json:"resources,omitempty"`

	// Sample command
	SampleAppCommandTxt string `json:"sampleAppCommandTxt,omitempty"`

	// Task UUID
	// Format: uuid
	TaskUUID strfmt.UUID `json:"taskUUID,omitempty"`

	// Universe configuration
	UniverseConfig map[string]string `json:"universeConfig,omitempty"`

	// Universe details
	UniverseDetails *UniverseDefinitionTaskParamsResp `json:"universeDetails,omitempty"`

	// Universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// Universe version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this universe resp
func (m *UniverseResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UniverseResp) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseResp) validateTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("taskUUID", "body", "uuid", m.TaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UniverseResp) validateUniverseDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseDetails) { // not required
		return nil
	}

	if m.UniverseDetails != nil {
		if err := m.UniverseDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("universeDetails")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseResp) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this universe resp based on the context it is used
func (m *UniverseResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUniverseDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UniverseResp) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {
		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseResp) contextValidateUniverseDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.UniverseDetails != nil {
		if err := m.UniverseDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("universeDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UniverseResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UniverseResp) UnmarshalBinary(b []byte) error {
	var res UniverseResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
