// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudSpecificInfo Node information reported by the cloud provider
//
// swagger:model CloudSpecificInfo
type CloudSpecificInfo struct {

	// True if the node has a public IP address assigned
	AssignPublicIP bool `json:"assignPublicIP,omitempty"`

	// The node's availability zone
	Az string `json:"az,omitempty"`

	// The node's cloud provider
	Cloud string `json:"cloud,omitempty"`

	// The node's instance type
	InstanceType string `json:"instance_type,omitempty"`

	// Mount roots
	MountRoots string `json:"mount_roots,omitempty"`

	// The node's private DNS
	PrivateDNS string `json:"private_dns,omitempty"`

	// The node's private IP address
	PrivateIP string `json:"private_ip,omitempty"`

	// The node's public DNS name
	PublicDNS string `json:"public_dns,omitempty"`

	// The node's public IP address
	PublicIP string `json:"public_ip,omitempty"`

	// The node's region
	Region string `json:"region,omitempty"`

	// Secondary Private IP
	SecondaryPrivateIP string `json:"secondary_private_ip,omitempty"`

	// Secondary Subnet IP
	SecondarySubnetID string `json:"secondary_subnet_id,omitempty"`

	// ID of the subnet on which this node is deployed
	SubnetID string `json:"subnet_id,omitempty"`

	// True if `use time sync` is enabled
	UseTimeSync bool `json:"useTimeSync,omitempty"`
}

// Validate validates this cloud specific info
func (m *CloudSpecificInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cloud specific info based on context it is used
func (m *CloudSpecificInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CloudSpecificInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudSpecificInfo) UnmarshalBinary(b []byte) error {
	var res CloudSpecificInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
