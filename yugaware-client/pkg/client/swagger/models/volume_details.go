// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeDetails volume details
//
// swagger:model VolumeDetails
type VolumeDetails struct {

	// mount path
	// Required: true
	MountPath *string `json:"mountPath"`

	// volume size g b
	// Required: true
	VolumeSizeGB *int32 `json:"volumeSizeGB"`

	// volume type
	// Required: true
	// Enum: [EBS SSD HDD NVME]
	VolumeType *string `json:"volumeType"`
}

// Validate validates this volume details
func (m *VolumeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeSizeGB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeDetails) validateMountPath(formats strfmt.Registry) error {

	if err := validate.Required("mountPath", "body", m.MountPath); err != nil {
		return err
	}

	return nil
}

func (m *VolumeDetails) validateVolumeSizeGB(formats strfmt.Registry) error {

	if err := validate.Required("volumeSizeGB", "body", m.VolumeSizeGB); err != nil {
		return err
	}

	return nil
}

var volumeDetailsTypeVolumeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EBS","SSD","HDD","NVME"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeDetailsTypeVolumeTypePropEnum = append(volumeDetailsTypeVolumeTypePropEnum, v)
	}
}

const (

	// VolumeDetailsVolumeTypeEBS captures enum value "EBS"
	VolumeDetailsVolumeTypeEBS string = "EBS"

	// VolumeDetailsVolumeTypeSSD captures enum value "SSD"
	VolumeDetailsVolumeTypeSSD string = "SSD"

	// VolumeDetailsVolumeTypeHDD captures enum value "HDD"
	VolumeDetailsVolumeTypeHDD string = "HDD"

	// VolumeDetailsVolumeTypeNVME captures enum value "NVME"
	VolumeDetailsVolumeTypeNVME string = "NVME"
)

// prop value enum
func (m *VolumeDetails) validateVolumeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, volumeDetailsTypeVolumeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VolumeDetails) validateVolumeType(formats strfmt.Registry) error {

	if err := validate.Required("volumeType", "body", m.VolumeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateVolumeTypeEnum("volumeType", "body", *m.VolumeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this volume details based on context it is used
func (m *VolumeDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeDetails) UnmarshalBinary(b []byte) error {
	var res VolumeDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
