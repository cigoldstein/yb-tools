// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Schedule Backup schedule
//
// swagger:model Schedule
type Schedule struct {

	// Cron expression for the schedule
	CronExpression string `json:"cronExpression,omitempty"`

	// Customer UUID
	// Read Only: true
	// Format: uuid
	CustomerUUID strfmt.UUID `json:"customerUUID,omitempty"`

	// Number of failed backup attempts
	// Read Only: true
	FailureCount int32 `json:"failureCount,omitempty"`

	// Frequency of the schedule, in minutes
	Frequency int64 `json:"frequency,omitempty"`

	// Schedule UUID
	// Read Only: true
	// Format: uuid
	ScheduleUUID strfmt.UUID `json:"scheduleUUID,omitempty"`

	// Status of the task. Possible values are _Active_, _Paused_, or _Stopped_.
	// Read Only: true
	// Enum: [Active Paused Stopped]
	Status string `json:"status,omitempty"`

	// Schedule task parameters
	TaskParams *MultiTableBackupParams `json:"taskParams,omitempty"`

	// Type of task to be scheduled. This can be either a multi-table backup, or a full-universe backup.
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse MultiTableBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig DeleteXClusterConfig EditXClusterConfig AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigDelete XClusterConfigSetStatus XClusterConfigModifyTables CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupUniverseKeys RestoreUniverseKeys WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate]
	TaskType string `json:"taskType,omitempty"`
}

// Validate validates this schedule
func (m *Schedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schedule) validateCustomerUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("customerUUID", "body", "uuid", m.CustomerUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) validateScheduleUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduleUUID", "body", "uuid", m.ScheduleUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var scheduleTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Paused","Stopped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleTypeStatusPropEnum = append(scheduleTypeStatusPropEnum, v)
	}
}

const (

	// ScheduleStatusActive captures enum value "Active"
	ScheduleStatusActive string = "Active"

	// ScheduleStatusPaused captures enum value "Paused"
	ScheduleStatusPaused string = "Paused"

	// ScheduleStatusStopped captures enum value "Stopped"
	ScheduleStatusStopped string = "Stopped"
)

// prop value enum
func (m *Schedule) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Schedule) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) validateTaskParams(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskParams) { // not required
		return nil
	}

	if m.TaskParams != nil {
		if err := m.TaskParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taskParams")
			}
			return err
		}
	}

	return nil
}

var scheduleTypeTaskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","MultiTableBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","DeleteXClusterConfig","EditXClusterConfig","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigDelete","XClusterConfigSetStatus","XClusterConfigModifyTables","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupUniverseKeys","RestoreUniverseKeys","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleTypeTaskTypePropEnum = append(scheduleTypeTaskTypePropEnum, v)
	}
}

const (

	// ScheduleTaskTypeCloudBootstrap captures enum value "CloudBootstrap"
	ScheduleTaskTypeCloudBootstrap string = "CloudBootstrap"

	// ScheduleTaskTypeCloudCleanup captures enum value "CloudCleanup"
	ScheduleTaskTypeCloudCleanup string = "CloudCleanup"

	// ScheduleTaskTypeCreateCassandraTable captures enum value "CreateCassandraTable"
	ScheduleTaskTypeCreateCassandraTable string = "CreateCassandraTable"

	// ScheduleTaskTypeCreateUniverse captures enum value "CreateUniverse"
	ScheduleTaskTypeCreateUniverse string = "CreateUniverse"

	// ScheduleTaskTypeReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	ScheduleTaskTypeReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// ScheduleTaskTypeReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	ScheduleTaskTypeReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// ScheduleTaskTypeCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	ScheduleTaskTypeCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// ScheduleTaskTypeDestroyUniverse captures enum value "DestroyUniverse"
	ScheduleTaskTypeDestroyUniverse string = "DestroyUniverse"

	// ScheduleTaskTypePauseUniverse captures enum value "PauseUniverse"
	ScheduleTaskTypePauseUniverse string = "PauseUniverse"

	// ScheduleTaskTypeResumeUniverse captures enum value "ResumeUniverse"
	ScheduleTaskTypeResumeUniverse string = "ResumeUniverse"

	// ScheduleTaskTypeDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	ScheduleTaskTypeDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// ScheduleTaskTypeDeleteTable captures enum value "DeleteTable"
	ScheduleTaskTypeDeleteTable string = "DeleteTable"

	// ScheduleTaskTypeBackupUniverse captures enum value "BackupUniverse"
	ScheduleTaskTypeBackupUniverse string = "BackupUniverse"

	// ScheduleTaskTypeMultiTableBackup captures enum value "MultiTableBackup"
	ScheduleTaskTypeMultiTableBackup string = "MultiTableBackup"

	// ScheduleTaskTypeEditUniverse captures enum value "EditUniverse"
	ScheduleTaskTypeEditUniverse string = "EditUniverse"

	// ScheduleTaskTypeEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	ScheduleTaskTypeEditKubernetesUniverse string = "EditKubernetesUniverse"

	// ScheduleTaskTypeExternalScript captures enum value "ExternalScript"
	ScheduleTaskTypeExternalScript string = "ExternalScript"

	// ScheduleTaskTypeKubernetesProvision captures enum value "KubernetesProvision"
	ScheduleTaskTypeKubernetesProvision string = "KubernetesProvision"

	// ScheduleTaskTypeImportIntoTable captures enum value "ImportIntoTable"
	ScheduleTaskTypeImportIntoTable string = "ImportIntoTable"

	// ScheduleTaskTypeUpgradeUniverse captures enum value "UpgradeUniverse"
	ScheduleTaskTypeUpgradeUniverse string = "UpgradeUniverse"

	// ScheduleTaskTypeRestartUniverse captures enum value "RestartUniverse"
	ScheduleTaskTypeRestartUniverse string = "RestartUniverse"

	// ScheduleTaskTypeSoftwareUpgrade captures enum value "SoftwareUpgrade"
	ScheduleTaskTypeSoftwareUpgrade string = "SoftwareUpgrade"

	// ScheduleTaskTypeSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	ScheduleTaskTypeSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// ScheduleTaskTypeGFlagsUpgrade captures enum value "GFlagsUpgrade"
	ScheduleTaskTypeGFlagsUpgrade string = "GFlagsUpgrade"

	// ScheduleTaskTypeGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	ScheduleTaskTypeGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// ScheduleTaskTypeCertsRotate captures enum value "CertsRotate"
	ScheduleTaskTypeCertsRotate string = "CertsRotate"

	// ScheduleTaskTypeTLSToggle captures enum value "TlsToggle"
	ScheduleTaskTypeTLSToggle string = "TlsToggle"

	// ScheduleTaskTypeVMImageUpgrade captures enum value "VMImageUpgrade"
	ScheduleTaskTypeVMImageUpgrade string = "VMImageUpgrade"

	// ScheduleTaskTypeSystemdUpgrade captures enum value "SystemdUpgrade"
	ScheduleTaskTypeSystemdUpgrade string = "SystemdUpgrade"

	// ScheduleTaskTypeCreateRootVolumes captures enum value "CreateRootVolumes"
	ScheduleTaskTypeCreateRootVolumes string = "CreateRootVolumes"

	// ScheduleTaskTypeReplaceRootVolume captures enum value "ReplaceRootVolume"
	ScheduleTaskTypeReplaceRootVolume string = "ReplaceRootVolume"

	// ScheduleTaskTypeChangeInstanceType captures enum value "ChangeInstanceType"
	ScheduleTaskTypeChangeInstanceType string = "ChangeInstanceType"

	// ScheduleTaskTypePersistResizeNode captures enum value "PersistResizeNode"
	ScheduleTaskTypePersistResizeNode string = "PersistResizeNode"

	// ScheduleTaskTypePersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	ScheduleTaskTypePersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// ScheduleTaskTypeUpdateNodeDetails captures enum value "UpdateNodeDetails"
	ScheduleTaskTypeUpdateNodeDetails string = "UpdateNodeDetails"

	// ScheduleTaskTypeUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	ScheduleTaskTypeUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// ScheduleTaskTypeDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	ScheduleTaskTypeDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// ScheduleTaskTypeStopNodeInUniverse captures enum value "StopNodeInUniverse"
	ScheduleTaskTypeStopNodeInUniverse string = "StopNodeInUniverse"

	// ScheduleTaskTypeStartNodeInUniverse captures enum value "StartNodeInUniverse"
	ScheduleTaskTypeStartNodeInUniverse string = "StartNodeInUniverse"

	// ScheduleTaskTypeAddNodeToUniverse captures enum value "AddNodeToUniverse"
	ScheduleTaskTypeAddNodeToUniverse string = "AddNodeToUniverse"

	// ScheduleTaskTypeRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	ScheduleTaskTypeRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// ScheduleTaskTypeReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	ScheduleTaskTypeReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// ScheduleTaskTypeSetUniverseKey captures enum value "SetUniverseKey"
	ScheduleTaskTypeSetUniverseKey string = "SetUniverseKey"

	// ScheduleTaskTypeSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	ScheduleTaskTypeSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// ScheduleTaskTypeCreateKMSConfig captures enum value "CreateKMSConfig"
	ScheduleTaskTypeCreateKMSConfig string = "CreateKMSConfig"

	// ScheduleTaskTypeDeleteKMSConfig captures enum value "DeleteKMSConfig"
	ScheduleTaskTypeDeleteKMSConfig string = "DeleteKMSConfig"

	// ScheduleTaskTypeUpdateDiskSize captures enum value "UpdateDiskSize"
	ScheduleTaskTypeUpdateDiskSize string = "UpdateDiskSize"

	// ScheduleTaskTypeStartMasterOnNode captures enum value "StartMasterOnNode"
	ScheduleTaskTypeStartMasterOnNode string = "StartMasterOnNode"

	// ScheduleTaskTypeCreateXClusterConfig captures enum value "CreateXClusterConfig"
	ScheduleTaskTypeCreateXClusterConfig string = "CreateXClusterConfig"

	// ScheduleTaskTypeDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	ScheduleTaskTypeDeleteXClusterConfig string = "DeleteXClusterConfig"

	// ScheduleTaskTypeEditXClusterConfig captures enum value "EditXClusterConfig"
	ScheduleTaskTypeEditXClusterConfig string = "EditXClusterConfig"

	// ScheduleTaskTypeAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	ScheduleTaskTypeAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// ScheduleTaskTypeAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	ScheduleTaskTypeAnsibleConfigureServers string = "AnsibleConfigureServers"

	// ScheduleTaskTypeAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	ScheduleTaskTypeAnsibleDestroyServer string = "AnsibleDestroyServer"

	// ScheduleTaskTypePauseServer captures enum value "PauseServer"
	ScheduleTaskTypePauseServer string = "PauseServer"

	// ScheduleTaskTypeResumeServer captures enum value "ResumeServer"
	ScheduleTaskTypeResumeServer string = "ResumeServer"

	// ScheduleTaskTypeAnsibleSetupServer captures enum value "AnsibleSetupServer"
	ScheduleTaskTypeAnsibleSetupServer string = "AnsibleSetupServer"

	// ScheduleTaskTypeAnsibleCreateServer captures enum value "AnsibleCreateServer"
	ScheduleTaskTypeAnsibleCreateServer string = "AnsibleCreateServer"

	// ScheduleTaskTypePrecheckNode captures enum value "PrecheckNode"
	ScheduleTaskTypePrecheckNode string = "PrecheckNode"

	// ScheduleTaskTypePrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	ScheduleTaskTypePrecheckNodeDetached string = "PrecheckNodeDetached"

	// ScheduleTaskTypeAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	ScheduleTaskTypeAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// ScheduleTaskTypeBulkImport captures enum value "BulkImport"
	ScheduleTaskTypeBulkImport string = "BulkImport"

	// ScheduleTaskTypeChangeMasterConfig captures enum value "ChangeMasterConfig"
	ScheduleTaskTypeChangeMasterConfig string = "ChangeMasterConfig"

	// ScheduleTaskTypeChangeAdminPassword captures enum value "ChangeAdminPassword"
	ScheduleTaskTypeChangeAdminPassword string = "ChangeAdminPassword"

	// ScheduleTaskTypeCreateTable captures enum value "CreateTable"
	ScheduleTaskTypeCreateTable string = "CreateTable"

	// ScheduleTaskTypeDeleteNode captures enum value "DeleteNode"
	ScheduleTaskTypeDeleteNode string = "DeleteNode"

	// ScheduleTaskTypeDeleteBackup captures enum value "DeleteBackup"
	ScheduleTaskTypeDeleteBackup string = "DeleteBackup"

	// ScheduleTaskTypeUpdateNodeProcess captures enum value "UpdateNodeProcess"
	ScheduleTaskTypeUpdateNodeProcess string = "UpdateNodeProcess"

	// ScheduleTaskTypeDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	ScheduleTaskTypeDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// ScheduleTaskTypeLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	ScheduleTaskTypeLoadBalancerStateChange string = "LoadBalancerStateChange"

	// ScheduleTaskTypeModifyBlackList captures enum value "ModifyBlackList"
	ScheduleTaskTypeModifyBlackList string = "ModifyBlackList"

	// ScheduleTaskTypeManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	ScheduleTaskTypeManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// ScheduleTaskTypeRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	ScheduleTaskTypeRemoveUniverseEntry string = "RemoveUniverseEntry"

	// ScheduleTaskTypeSetFlagInMemory captures enum value "SetFlagInMemory"
	ScheduleTaskTypeSetFlagInMemory string = "SetFlagInMemory"

	// ScheduleTaskTypeSetNodeState captures enum value "SetNodeState"
	ScheduleTaskTypeSetNodeState string = "SetNodeState"

	// ScheduleTaskTypeSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	ScheduleTaskTypeSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// ScheduleTaskTypeUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	ScheduleTaskTypeUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// ScheduleTaskTypeUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	ScheduleTaskTypeUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// ScheduleTaskTypeUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	ScheduleTaskTypeUpdatePlacementInfo string = "UpdatePlacementInfo"

	// ScheduleTaskTypeUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	ScheduleTaskTypeUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// ScheduleTaskTypeWaitForDataMove captures enum value "WaitForDataMove"
	ScheduleTaskTypeWaitForDataMove string = "WaitForDataMove"

	// ScheduleTaskTypeWaitForLoadBalance captures enum value "WaitForLoadBalance"
	ScheduleTaskTypeWaitForLoadBalance string = "WaitForLoadBalance"

	// ScheduleTaskTypeWaitForMasterLeader captures enum value "WaitForMasterLeader"
	ScheduleTaskTypeWaitForMasterLeader string = "WaitForMasterLeader"

	// ScheduleTaskTypeWaitForServer captures enum value "WaitForServer"
	ScheduleTaskTypeWaitForServer string = "WaitForServer"

	// ScheduleTaskTypeWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	ScheduleTaskTypeWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// ScheduleTaskTypeDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	ScheduleTaskTypeDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// ScheduleTaskTypeInstanceActions captures enum value "InstanceActions"
	ScheduleTaskTypeInstanceActions string = "InstanceActions"

	// ScheduleTaskTypeWaitForServerReady captures enum value "WaitForServerReady"
	ScheduleTaskTypeWaitForServerReady string = "WaitForServerReady"

	// ScheduleTaskTypeRunExternalScript captures enum value "RunExternalScript"
	ScheduleTaskTypeRunExternalScript string = "RunExternalScript"

	// ScheduleTaskTypeXClusterConfigSetup captures enum value "XClusterConfigSetup"
	ScheduleTaskTypeXClusterConfigSetup string = "XClusterConfigSetup"

	// ScheduleTaskTypeXClusterConfigDelete captures enum value "XClusterConfigDelete"
	ScheduleTaskTypeXClusterConfigDelete string = "XClusterConfigDelete"

	// ScheduleTaskTypeXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	ScheduleTaskTypeXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// ScheduleTaskTypeXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	ScheduleTaskTypeXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// ScheduleTaskTypeCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	ScheduleTaskTypeCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// ScheduleTaskTypeCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	ScheduleTaskTypeCloudAccessKeySetup string = "CloudAccessKeySetup"

	// ScheduleTaskTypeCloudInitializer captures enum value "CloudInitializer"
	ScheduleTaskTypeCloudInitializer string = "CloudInitializer"

	// ScheduleTaskTypeCloudProviderCleanup captures enum value "CloudProviderCleanup"
	ScheduleTaskTypeCloudProviderCleanup string = "CloudProviderCleanup"

	// ScheduleTaskTypeCloudRegionCleanup captures enum value "CloudRegionCleanup"
	ScheduleTaskTypeCloudRegionCleanup string = "CloudRegionCleanup"

	// ScheduleTaskTypeCloudRegionSetup captures enum value "CloudRegionSetup"
	ScheduleTaskTypeCloudRegionSetup string = "CloudRegionSetup"

	// ScheduleTaskTypeCloudSetup captures enum value "CloudSetup"
	ScheduleTaskTypeCloudSetup string = "CloudSetup"

	// ScheduleTaskTypeBackupTable captures enum value "BackupTable"
	ScheduleTaskTypeBackupTable string = "BackupTable"

	// ScheduleTaskTypeBackupUniverseKeys captures enum value "BackupUniverseKeys"
	ScheduleTaskTypeBackupUniverseKeys string = "BackupUniverseKeys"

	// ScheduleTaskTypeRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	ScheduleTaskTypeRestoreUniverseKeys string = "RestoreUniverseKeys"

	// ScheduleTaskTypeWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	ScheduleTaskTypeWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// ScheduleTaskTypeEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	ScheduleTaskTypeEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// ScheduleTaskTypeDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	ScheduleTaskTypeDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// ScheduleTaskTypeDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	ScheduleTaskTypeDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// ScheduleTaskTypeKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	ScheduleTaskTypeKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// ScheduleTaskTypeKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	ScheduleTaskTypeKubernetesWaitForPod string = "KubernetesWaitForPod"

	// ScheduleTaskTypeKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	ScheduleTaskTypeKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// ScheduleTaskTypeCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	ScheduleTaskTypeCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// ScheduleTaskTypeWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	ScheduleTaskTypeWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// ScheduleTaskTypeUnivSetCertificate captures enum value "UnivSetCertificate"
	ScheduleTaskTypeUnivSetCertificate string = "UnivSetCertificate"

	// ScheduleTaskTypeCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	ScheduleTaskTypeCreateAlertDefinitions string = "CreateAlertDefinitions"

	// ScheduleTaskTypeUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	ScheduleTaskTypeUniverseSetTLSParams string = "UniverseSetTlsParams"

	// ScheduleTaskTypeUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	ScheduleTaskTypeUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// ScheduleTaskTypeResetUniverseVersion captures enum value "ResetUniverseVersion"
	ScheduleTaskTypeResetUniverseVersion string = "ResetUniverseVersion"

	// ScheduleTaskTypeDeleteCertificate captures enum value "DeleteCertificate"
	ScheduleTaskTypeDeleteCertificate string = "DeleteCertificate"
)

// prop value enum
func (m *Schedule) validateTaskTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleTypeTaskTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Schedule) validateTaskType(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskTypeEnum("taskType", "body", m.TaskType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this schedule based on the context it is used
func (m *Schedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomerUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailureCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduleUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schedule) contextValidateCustomerUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customerUUID", "body", strfmt.UUID(m.CustomerUUID)); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) contextValidateFailureCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "failureCount", "body", int32(m.FailureCount)); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) contextValidateScheduleUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "scheduleUUID", "body", strfmt.UUID(m.ScheduleUUID)); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) contextValidateTaskParams(ctx context.Context, formats strfmt.Registry) error {

	if m.TaskParams != nil {
		if err := m.TaskParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taskParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Schedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Schedule) UnmarshalBinary(b []byte) error {
	var res Schedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
