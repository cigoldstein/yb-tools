// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TableDetails Table details
//
// swagger:model TableDetails
type TableDetails struct {

	// Details of all columns in the table
	Columns []*ColumnDetails `json:"columns"`

	// CQL create keyspace detail. This is the statement to be used to create the keyspace.
	CqlcreateKeyspaceString string `json:"cqlcreateKeyspaceString,omitempty"`

	// CQL create table detail. This is the statement to be used to create the table.
	CqlcreateTableString string `json:"cqlcreateTableString,omitempty"`

	// CQL use keyspace detail. This is the statement to be used to use the keyspace.
	CqluseKeyspaceString string `json:"cqluseKeyspaceString,omitempty"`

	// Keyspace to which this table belongs
	Keyspace string `json:"keyspace,omitempty"`

	// Table name
	TableName string `json:"tableName,omitempty"`

	// The default table-level time to live, in seconds. A value of `-1` represents an infinite TTL.
	TTLInSeconds int64 `json:"ttlInSeconds,omitempty"`
}

// Validate validates this table details
func (m *TableDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumns(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableDetails) validateColumns(formats strfmt.Registry) error {
	if swag.IsZero(m.Columns) { // not required
		return nil
	}

	for i := 0; i < len(m.Columns); i++ {
		if swag.IsZero(m.Columns[i]) { // not required
			continue
		}

		if m.Columns[i] != nil {
			if err := m.Columns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this table details based on the context it is used
func (m *TableDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateColumns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableDetails) contextValidateColumns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Columns); i++ {

		if m.Columns[i] != nil {
			if err := m.Columns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TableDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TableDetails) UnmarshalBinary(b []byte) error {
	var res TableDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
