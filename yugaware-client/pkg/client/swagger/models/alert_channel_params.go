// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AlertChannelParams alert channel params
//
// swagger:discriminator AlertChannelParams channelType
type AlertChannelParams interface {
	runtime.Validatable
	runtime.ContextValidatable

	// text template
	// Required: true
	TextTemplate() *string
	SetTextTemplate(*string)

	// title template
	// Required: true
	TitleTemplate() *string
	SetTitleTemplate(*string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type alertChannelParams struct {
	textTemplateField *string

	titleTemplateField *string
}

// TextTemplate gets the text template of this polymorphic type
func (m *alertChannelParams) TextTemplate() *string {
	return m.textTemplateField
}

// SetTextTemplate sets the text template of this polymorphic type
func (m *alertChannelParams) SetTextTemplate(val *string) {
	m.textTemplateField = val
}

// TitleTemplate gets the title template of this polymorphic type
func (m *alertChannelParams) TitleTemplate() *string {
	return m.titleTemplateField
}

// SetTitleTemplate sets the title template of this polymorphic type
func (m *alertChannelParams) SetTitleTemplate(val *string) {
	m.titleTemplateField = val
}

// UnmarshalAlertChannelParamsSlice unmarshals polymorphic slices of AlertChannelParams
func UnmarshalAlertChannelParamsSlice(reader io.Reader, consumer runtime.Consumer) ([]AlertChannelParams, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []AlertChannelParams
	for _, element := range elements {
		obj, err := unmarshalAlertChannelParams(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalAlertChannelParams unmarshals polymorphic AlertChannelParams
func UnmarshalAlertChannelParams(reader io.Reader, consumer runtime.Consumer) (AlertChannelParams, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalAlertChannelParams(data, consumer)
}

func unmarshalAlertChannelParams(data []byte, consumer runtime.Consumer) (AlertChannelParams, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the channelType property.
	var getType struct {
		ChannelType string `json:"channelType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("channelType", "body", getType.ChannelType); err != nil {
		return nil, err
	}

	// The value of channelType is used to determine which type to create and unmarshal the data into
	switch getType.ChannelType {
	case "AlertChannelEmailParams":
		var result AlertChannelEmailParams
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AlertChannelParams":
		var result alertChannelParams
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AlertChannelSlackParams":
		var result AlertChannelSlackParams
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid channelType value: %q", getType.ChannelType)
}

// Validate validates this alert channel params
func (m *alertChannelParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTextTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitleTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *alertChannelParams) validateTextTemplate(formats strfmt.Registry) error {

	if err := validate.Required("textTemplate", "body", m.TextTemplate()); err != nil {
		return err
	}

	return nil
}

func (m *alertChannelParams) validateTitleTemplate(formats strfmt.Registry) error {

	if err := validate.Required("titleTemplate", "body", m.TitleTemplate()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this alert channel params based on context it is used
func (m *alertChannelParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
