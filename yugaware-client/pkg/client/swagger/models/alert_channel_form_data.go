// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertChannelFormData alert channel form data
//
// swagger:model AlertChannelFormData
type AlertChannelFormData struct {

	// alert channel UUID
	// Required: true
	// Format: uuid
	AlertChannelUUID *strfmt.UUID `json:"alertChannelUUID"`

	// name
	// Required: true
	Name *string `json:"name"`

	paramsField AlertChannelParams
}

// Params gets the params of this base type
func (m *AlertChannelFormData) Params() AlertChannelParams {
	return m.paramsField
}

// SetParams sets the params of this base type
func (m *AlertChannelFormData) SetParams(val AlertChannelParams) {
	m.paramsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *AlertChannelFormData) UnmarshalJSON(raw []byte) error {
	var data struct {
		AlertChannelUUID *strfmt.UUID `json:"alertChannelUUID"`

		Name *string `json:"name"`

		Params json.RawMessage `json:"params"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propParams, err := UnmarshalAlertChannelParams(bytes.NewBuffer(data.Params), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result AlertChannelFormData

	// alertChannelUUID
	result.AlertChannelUUID = data.AlertChannelUUID

	// name
	result.Name = data.Name

	// params
	result.paramsField = propParams

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m AlertChannelFormData) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		AlertChannelUUID *strfmt.UUID `json:"alertChannelUUID"`

		Name *string `json:"name"`
	}{

		AlertChannelUUID: m.AlertChannelUUID,

		Name: m.Name,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Params AlertChannelParams `json:"params"`
	}{

		Params: m.paramsField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this alert channel form data
func (m *AlertChannelFormData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertChannelUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertChannelFormData) validateAlertChannelUUID(formats strfmt.Registry) error {

	if err := validate.Required("alertChannelUUID", "body", m.AlertChannelUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("alertChannelUUID", "body", "uuid", m.AlertChannelUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AlertChannelFormData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AlertChannelFormData) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("params", "body", m.Params()); err != nil {
		return err
	}

	if err := m.Params().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("params")
		}
		return err
	}

	return nil
}

// ContextValidate validate this alert channel form data based on the context it is used
func (m *AlertChannelFormData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertChannelFormData) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Params().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("params")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertChannelFormData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertChannelFormData) UnmarshalBinary(b []byte) error {
	var res AlertChannelFormData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
