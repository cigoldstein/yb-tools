// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cluster cluster
//
// swagger:model Cluster
type Cluster struct {

	// cluster type
	// Required: true
	// Enum: [PRIMARY ASYNC]
	ClusterType *string `json:"clusterType"`

	// index
	Index int32 `json:"index,omitempty"`

	// placement info
	PlacementInfo *PlacementInfo `json:"placementInfo,omitempty"`

	// regions
	// Read Only: true
	Regions []*Region `json:"regions"`

	// user intent
	// Required: true
	UserIntent *UserIntent `json:"userIntent"`

	// uuid
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this cluster
func (m *Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacementInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterTypeClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterTypeClusterTypePropEnum = append(clusterTypeClusterTypePropEnum, v)
	}
}

const (

	// ClusterClusterTypePRIMARY captures enum value "PRIMARY"
	ClusterClusterTypePRIMARY string = "PRIMARY"

	// ClusterClusterTypeASYNC captures enum value "ASYNC"
	ClusterClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *Cluster) validateClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterTypeClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Cluster) validateClusterType(formats strfmt.Registry) error {

	if err := validate.Required("clusterType", "body", m.ClusterType); err != nil {
		return err
	}

	// value enum
	if err := m.validateClusterTypeEnum("clusterType", "body", *m.ClusterType); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validatePlacementInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.PlacementInfo) { // not required
		return nil
	}

	if m.PlacementInfo != nil {
		if err := m.PlacementInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placementInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("placementInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateRegions(formats strfmt.Registry) error {
	if swag.IsZero(m.Regions) { // not required
		return nil
	}

	for i := 0; i < len(m.Regions); i++ {
		if swag.IsZero(m.Regions[i]) { // not required
			continue
		}

		if m.Regions[i] != nil {
			if err := m.Regions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateUserIntent(formats strfmt.Registry) error {

	if err := validate.Required("userIntent", "body", m.UserIntent); err != nil {
		return err
	}

	if m.UserIntent != nil {
		if err := m.UserIntent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userIntent")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cluster based on the context it is used
func (m *Cluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlacementInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cluster) contextValidatePlacementInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PlacementInfo != nil {
		if err := m.PlacementInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placementInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("placementInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateRegions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "regions", "body", []*Region(m.Regions)); err != nil {
		return err
	}

	for i := 0; i < len(m.Regions); i++ {

		if m.Regions[i] != nil {
			if err := m.Regions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) contextValidateUserIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.UserIntent != nil {
		if err := m.UserIntent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userIntent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userIntent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cluster) UnmarshalBinary(b []byte) error {
	var res Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
