// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertDestinationFormData alert destination form data
//
// swagger:model AlertDestinationFormData
type AlertDestinationFormData struct {

	// channels
	// Required: true
	Channels []strfmt.UUID `json:"channels"`

	// default destination
	// Required: true
	DefaultDestination *bool `json:"defaultDestination"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this alert destination form data
func (m *AlertDestinationFormData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertDestinationFormData) validateChannels(formats strfmt.Registry) error {

	if err := validate.Required("channels", "body", m.Channels); err != nil {
		return err
	}

	for i := 0; i < len(m.Channels); i++ {

		if err := validate.FormatOf("channels"+"."+strconv.Itoa(i), "body", "uuid", m.Channels[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *AlertDestinationFormData) validateDefaultDestination(formats strfmt.Registry) error {

	if err := validate.Required("defaultDestination", "body", m.DefaultDestination); err != nil {
		return err
	}

	return nil
}

func (m *AlertDestinationFormData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this alert destination form data based on context it is used
func (m *AlertDestinationFormData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AlertDestinationFormData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertDestinationFormData) UnmarshalBinary(b []byte) error {
	var res AlertDestinationFormData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
