// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetConfigVerifyCredentials request
	GetConfigVerifyCredentials(ctx context.Context, params *GetConfigVerifyCredentialsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnterprise request
	GetEnterprise(ctx context.Context, params *GetEnterpriseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnterpriseGroups request
	GetEnterpriseGroups(ctx context.Context, params *GetEnterpriseGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGetIdentityCookie request
	GetGetIdentityCookie(ctx context.Context, params *GetGetIdentityCookieParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGroup request with any body
	PutGroupWithBody(ctx context.Context, params *PutGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroup(ctx context.Context, params *PutGroupParams, body PutGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupGroupId request
	DeleteGroupGroupId(ctx context.Context, groupId string, params *DeleteGroupGroupIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGroupGroupIdUser request with any body
	PutGroupGroupIdUserWithBody(ctx context.Context, groupId string, params *PutGroupGroupIdUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroupGroupIdUser(ctx context.Context, groupId string, params *PutGroupGroupIdUserParams, body PutGroupGroupIdUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupGroupIdUserId request
	DeleteGroupGroupIdUserId(ctx context.Context, groupId string, userId string, params *DeleteGroupGroupIdUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackage request
	GetPackage(ctx context.Context, params *GetPackageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePackage request with any body
	CreatePackageWithBody(ctx context.Context, params *CreatePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePackage(ctx context.Context, params *CreatePackageParams, body CreatePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackageArchived request
	GetPackageArchived(ctx context.Context, params *GetPackageArchivedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationPackages request with any body
	GetOrganizationPackagesWithBody(ctx context.Context, params *GetOrganizationPackagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetOrganizationPackages(ctx context.Context, params *GetOrganizationPackagesParams, body GetOrganizationPackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackageReceived request
	GetPackageReceived(ctx context.Context, params *GetPackageReceivedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackageWorkspaces request
	GetPackageWorkspaces(ctx context.Context, params *GetPackageWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePackagePackageId request
	DeletePackagePackageId(ctx context.Context, packageId string, params *DeletePackagePackageIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackageInformation request
	GetPackageInformation(ctx context.Context, packageId string, params *GetPackageInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPackagePackageId request with any body
	PostPackagePackageIdWithBody(ctx context.Context, packageId string, params *PostPackagePackageIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPackagePackageId(ctx context.Context, packageId string, params *PostPackagePackageIdParams, body PostPackagePackageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPackagePackageIdActivityLog request
	PostPackagePackageIdActivityLog(ctx context.Context, packageId string, params *PostPackagePackageIdActivityLogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackagePackageIdDirectoryDirectoryId request
	GetPackagePackageIdDirectoryDirectoryId(ctx context.Context, packageId string, directoryId string, params *GetPackagePackageIdDirectoryDirectoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPackagePackageIdDirectoryDirectoryId request with any body
	PostPackagePackageIdDirectoryDirectoryIdWithBody(ctx context.Context, packageId string, directoryId string, params *PostPackagePackageIdDirectoryDirectoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPackagePackageIdDirectoryDirectoryId(ctx context.Context, packageId string, directoryId string, params *PostPackagePackageIdDirectoryDirectoryIdParams, body PostPackagePackageIdDirectoryDirectoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePackagePackageIdDirectoryDirectoryId request
	DeletePackagePackageIdDirectoryDirectoryId(ctx context.Context, packageId string, directoryId string, params *DeletePackagePackageIdDirectoryDirectoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackagePackageIdDirectoryDirectoryIdFileFileId request
	GetPackagePackageIdDirectoryDirectoryIdFileFileId(ctx context.Context, packageId string, directoryId string, fileId string, params *GetPackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePackagePackageIdDirectoryDirectoryIdFileFileId request
	DeletePackagePackageIdDirectoryDirectoryIdFileFileId(ctx context.Context, packageId string, directoryId string, fileId string, params *DeletePackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPackagePackageIdDirectoryDirectoryIdFileFileId request
	PostPackagePackageIdDirectoryDirectoryIdFileFileId(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrls request with any body
	PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsWithBody(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrls(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsParams, body PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPackagePackageIdDirectoryDirectoryIdSubdirectory request with any body
	PutPackagePackageIdDirectoryDirectoryIdSubdirectoryWithBody(ctx context.Context, packageId string, directoryId string, params *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPackagePackageIdDirectoryDirectoryIdSubdirectory(ctx context.Context, packageId string, directoryId string, params *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryParams, body PutPackagePackageIdDirectoryDirectoryIdSubdirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFile request with any body
	CreateFileWithBody(ctx context.Context, packageId string, params *CreateFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFile(ctx context.Context, packageId string, params *CreateFileParams, body CreateFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePackagePackageIdFileFileId request
	DeletePackagePackageIdFileFileId(ctx context.Context, packageId string, fileId string, params *DeletePackagePackageIdFileFileIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackagePackageIdFileFileId request
	GetPackagePackageIdFileFileId(ctx context.Context, packageId string, fileId string, params *GetPackagePackageIdFileFileIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPackagePackageIdFileFileIdCopy request with any body
	PostPackagePackageIdFileFileIdCopyWithBody(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdCopyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPackagePackageIdFileFileIdCopy(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdCopyParams, body PostPackagePackageIdFileFileIdCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPackagePackageIdFileFileIdDownloadUrls request with any body
	PostPackagePackageIdFileFileIdDownloadUrlsWithBody(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdDownloadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPackagePackageIdFileFileIdDownloadUrls(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdDownloadUrlsParams, body PostPackagePackageIdFileFileIdDownloadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadComplete request with any body
	UploadCompleteWithBody(ctx context.Context, packageId string, fileId string, params *UploadCompleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UploadComplete(ctx context.Context, packageId string, fileId string, params *UploadCompleteParams, body UploadCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUploadUrls request with any body
	GetUploadUrlsWithBody(ctx context.Context, packageId string, fileId string, params *GetUploadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUploadUrls(ctx context.Context, packageId string, fileId string, params *GetUploadUrlsParams, body GetUploadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FinalizePackage request with any body
	FinalizePackageWithBody(ctx context.Context, packageId string, params *FinalizePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FinalizePackage(ctx context.Context, packageId string, params *FinalizePackageParams, body FinalizePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePackagePackageIdGroupGroupId request
	DeletePackagePackageIdGroupGroupId(ctx context.Context, packageId string, groupId string, params *DeletePackagePackageIdGroupGroupIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPackagePackageIdGroupGroupId request
	PutPackagePackageIdGroupGroupId(ctx context.Context, packageId string, groupId string, params *PutPackagePackageIdGroupGroupIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackagePackageIdLinkPublicKeyId request
	GetPackagePackageIdLinkPublicKeyId(ctx context.Context, packageId string, publicKeyId string, params *GetPackagePackageIdLinkPublicKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPackagePackageIdLinkPublicKeyId request
	PutPackagePackageIdLinkPublicKeyId(ctx context.Context, packageId string, publicKeyId string, params *PutPackagePackageIdLinkPublicKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadEncryptedMessage request with any body
	UploadEncryptedMessageWithBody(ctx context.Context, packageId string, params *UploadEncryptedMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UploadEncryptedMessage(ctx context.Context, packageId string, params *UploadEncryptedMessageParams, body UploadEncryptedMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackagePackageIdMessageChecksum request
	GetPackagePackageIdMessageChecksum(ctx context.Context, packageId string, checksum string, params *GetPackagePackageIdMessageChecksumParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryId request
	PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryId(ctx context.Context, packageId string, sourcedirectoryId string, targetdirectoryId string, params *PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackagePackageIdPublicKeys request
	GetPackagePackageIdPublicKeys(ctx context.Context, packageId string, params *GetPackagePackageIdPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRecipient request with any body
	AddRecipientWithBody(ctx context.Context, packageId string, params *AddRecipientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRecipient(ctx context.Context, packageId string, params *AddRecipientParams, body AddRecipientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePackagePackageIdRecipientRecipientId request
	DeletePackagePackageIdRecipientRecipientId(ctx context.Context, packageId string, recipientId string, params *DeletePackagePackageIdRecipientRecipientIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackagePackageIdRecipientRecipientId request
	GetPackagePackageIdRecipientRecipientId(ctx context.Context, packageId string, recipientId string, params *GetPackagePackageIdRecipientRecipientIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPackagePackageIdRecipientRecipientId request with any body
	PostPackagePackageIdRecipientRecipientIdWithBody(ctx context.Context, packageId string, recipientId string, params *PostPackagePackageIdRecipientRecipientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPackagePackageIdRecipientRecipientId(ctx context.Context, packageId string, recipientId string, params *PostPackagePackageIdRecipientRecipientIdParams, body PostPackagePackageIdRecipientRecipientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPackagePackageIdRecipients request with any body
	PutPackagePackageIdRecipientsWithBody(ctx context.Context, packageId string, params *PutPackagePackageIdRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPackagePackageIdRecipients(ctx context.Context, packageId string, params *PutPackagePackageIdRecipientsParams, body PutPackagePackageIdRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePackagePackageIdTemp request
	DeletePackagePackageIdTemp(ctx context.Context, packageId string, params *DeletePackagePackageIdTempParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackagePackageIdRecipientIdPublicKeys request
	GetPackagePackageIdRecipientIdPublicKeys(ctx context.Context, packageId string, recipientId string, params *GetPackagePackageIdRecipientIdPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPublicKey request with any body
	PutPublicKeyWithBody(ctx context.Context, params *PutPublicKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPublicKey(ctx context.Context, params *PutPublicKeyParams, body PutPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePublicKeyPublicKeyId request
	DeletePublicKeyPublicKeyId(ctx context.Context, publicKeyId string, params *DeletePublicKeyPublicKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicKeyPublicKeyId request
	GetPublicKeyPublicKeyId(ctx context.Context, publicKeyId string, params *GetPublicKeyPublicKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipientHistoryRecipientEmail request
	GetRecipientHistoryRecipientEmail(ctx context.Context, recipientEmail string, params *GetRecipientHistoryRecipientEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSyncPublicKeyId request
	GetSyncPublicKeyId(ctx context.Context, publicKeyId string, params *GetSyncPublicKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserDropzoneRecipients request
	DeleteUserDropzoneRecipients(ctx context.Context, params *DeleteUserDropzoneRecipientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserDropzoneRecipients request
	GetUserDropzoneRecipients(ctx context.Context, params *GetUserDropzoneRecipientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserDropzoneRecipients request with any body
	PutUserDropzoneRecipientsWithBody(ctx context.Context, params *PutUserDropzoneRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserDropzoneRecipients(ctx context.Context, params *PutUserDropzoneRecipientsParams, body PutUserDropzoneRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGroups request
	GetUserGroups(ctx context.Context, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserIdDropzoneConfig request with any body
	PostUserUserIdDropzoneConfigWithBody(ctx context.Context, userId string, params *PostUserUserIdDropzoneConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdDropzoneConfig(ctx context.Context, userId string, params *PostUserUserIdDropzoneConfigParams, body PostUserUserIdDropzoneConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetConfigVerifyCredentials(ctx context.Context, params *GetConfigVerifyCredentialsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigVerifyCredentialsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnterprise(ctx context.Context, params *GetEnterpriseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnterpriseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnterpriseGroups(ctx context.Context, params *GetEnterpriseGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnterpriseGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGetIdentityCookie(ctx context.Context, params *GetGetIdentityCookieParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGetIdentityCookieRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupWithBody(ctx context.Context, params *PutGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroup(ctx context.Context, params *PutGroupParams, body PutGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupGroupId(ctx context.Context, groupId string, params *DeleteGroupGroupIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupGroupIdRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupGroupIdUserWithBody(ctx context.Context, groupId string, params *PutGroupGroupIdUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupGroupIdUserRequestWithBody(c.Server, groupId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupGroupIdUser(ctx context.Context, groupId string, params *PutGroupGroupIdUserParams, body PutGroupGroupIdUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupGroupIdUserRequest(c.Server, groupId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupGroupIdUserId(ctx context.Context, groupId string, userId string, params *DeleteGroupGroupIdUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupGroupIdUserIdRequest(c.Server, groupId, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackage(ctx context.Context, params *GetPackageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePackageWithBody(ctx context.Context, params *CreatePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePackageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePackage(ctx context.Context, params *CreatePackageParams, body CreatePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePackageRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackageArchived(ctx context.Context, params *GetPackageArchivedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackageArchivedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationPackagesWithBody(ctx context.Context, params *GetOrganizationPackagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationPackagesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationPackages(ctx context.Context, params *GetOrganizationPackagesParams, body GetOrganizationPackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationPackagesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackageReceived(ctx context.Context, params *GetPackageReceivedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackageReceivedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackageWorkspaces(ctx context.Context, params *GetPackageWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackageWorkspacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePackagePackageId(ctx context.Context, packageId string, params *DeletePackagePackageIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePackagePackageIdRequest(c.Server, packageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackageInformation(ctx context.Context, packageId string, params *GetPackageInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackageInformationRequest(c.Server, packageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdWithBody(ctx context.Context, packageId string, params *PostPackagePackageIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdRequestWithBody(c.Server, packageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageId(ctx context.Context, packageId string, params *PostPackagePackageIdParams, body PostPackagePackageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdRequest(c.Server, packageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdActivityLog(ctx context.Context, packageId string, params *PostPackagePackageIdActivityLogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdActivityLogRequest(c.Server, packageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackagePackageIdDirectoryDirectoryId(ctx context.Context, packageId string, directoryId string, params *GetPackagePackageIdDirectoryDirectoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagePackageIdDirectoryDirectoryIdRequest(c.Server, packageId, directoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdDirectoryDirectoryIdWithBody(ctx context.Context, packageId string, directoryId string, params *PostPackagePackageIdDirectoryDirectoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdDirectoryDirectoryIdRequestWithBody(c.Server, packageId, directoryId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdDirectoryDirectoryId(ctx context.Context, packageId string, directoryId string, params *PostPackagePackageIdDirectoryDirectoryIdParams, body PostPackagePackageIdDirectoryDirectoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdDirectoryDirectoryIdRequest(c.Server, packageId, directoryId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePackagePackageIdDirectoryDirectoryId(ctx context.Context, packageId string, directoryId string, params *DeletePackagePackageIdDirectoryDirectoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePackagePackageIdDirectoryDirectoryIdRequest(c.Server, packageId, directoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackagePackageIdDirectoryDirectoryIdFileFileId(ctx context.Context, packageId string, directoryId string, fileId string, params *GetPackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagePackageIdDirectoryDirectoryIdFileFileIdRequest(c.Server, packageId, directoryId, fileId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePackagePackageIdDirectoryDirectoryIdFileFileId(ctx context.Context, packageId string, directoryId string, fileId string, params *DeletePackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePackagePackageIdDirectoryDirectoryIdFileFileIdRequest(c.Server, packageId, directoryId, fileId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdDirectoryDirectoryIdFileFileId(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdDirectoryDirectoryIdFileFileIdRequest(c.Server, packageId, directoryId, fileId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsWithBody(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsRequestWithBody(c.Server, packageId, directoryId, fileId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrls(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsParams, body PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsRequest(c.Server, packageId, directoryId, fileId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPackagePackageIdDirectoryDirectoryIdSubdirectoryWithBody(ctx context.Context, packageId string, directoryId string, params *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPackagePackageIdDirectoryDirectoryIdSubdirectoryRequestWithBody(c.Server, packageId, directoryId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPackagePackageIdDirectoryDirectoryIdSubdirectory(ctx context.Context, packageId string, directoryId string, params *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryParams, body PutPackagePackageIdDirectoryDirectoryIdSubdirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPackagePackageIdDirectoryDirectoryIdSubdirectoryRequest(c.Server, packageId, directoryId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFileWithBody(ctx context.Context, packageId string, params *CreateFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFileRequestWithBody(c.Server, packageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFile(ctx context.Context, packageId string, params *CreateFileParams, body CreateFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFileRequest(c.Server, packageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePackagePackageIdFileFileId(ctx context.Context, packageId string, fileId string, params *DeletePackagePackageIdFileFileIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePackagePackageIdFileFileIdRequest(c.Server, packageId, fileId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackagePackageIdFileFileId(ctx context.Context, packageId string, fileId string, params *GetPackagePackageIdFileFileIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagePackageIdFileFileIdRequest(c.Server, packageId, fileId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdFileFileIdCopyWithBody(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdCopyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdFileFileIdCopyRequestWithBody(c.Server, packageId, fileId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdFileFileIdCopy(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdCopyParams, body PostPackagePackageIdFileFileIdCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdFileFileIdCopyRequest(c.Server, packageId, fileId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdFileFileIdDownloadUrlsWithBody(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdDownloadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdFileFileIdDownloadUrlsRequestWithBody(c.Server, packageId, fileId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdFileFileIdDownloadUrls(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdDownloadUrlsParams, body PostPackagePackageIdFileFileIdDownloadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdFileFileIdDownloadUrlsRequest(c.Server, packageId, fileId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadCompleteWithBody(ctx context.Context, packageId string, fileId string, params *UploadCompleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadCompleteRequestWithBody(c.Server, packageId, fileId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadComplete(ctx context.Context, packageId string, fileId string, params *UploadCompleteParams, body UploadCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadCompleteRequest(c.Server, packageId, fileId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUploadUrlsWithBody(ctx context.Context, packageId string, fileId string, params *GetUploadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUploadUrlsRequestWithBody(c.Server, packageId, fileId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUploadUrls(ctx context.Context, packageId string, fileId string, params *GetUploadUrlsParams, body GetUploadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUploadUrlsRequest(c.Server, packageId, fileId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinalizePackageWithBody(ctx context.Context, packageId string, params *FinalizePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinalizePackageRequestWithBody(c.Server, packageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinalizePackage(ctx context.Context, packageId string, params *FinalizePackageParams, body FinalizePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinalizePackageRequest(c.Server, packageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePackagePackageIdGroupGroupId(ctx context.Context, packageId string, groupId string, params *DeletePackagePackageIdGroupGroupIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePackagePackageIdGroupGroupIdRequest(c.Server, packageId, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPackagePackageIdGroupGroupId(ctx context.Context, packageId string, groupId string, params *PutPackagePackageIdGroupGroupIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPackagePackageIdGroupGroupIdRequest(c.Server, packageId, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackagePackageIdLinkPublicKeyId(ctx context.Context, packageId string, publicKeyId string, params *GetPackagePackageIdLinkPublicKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagePackageIdLinkPublicKeyIdRequest(c.Server, packageId, publicKeyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPackagePackageIdLinkPublicKeyId(ctx context.Context, packageId string, publicKeyId string, params *PutPackagePackageIdLinkPublicKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPackagePackageIdLinkPublicKeyIdRequest(c.Server, packageId, publicKeyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadEncryptedMessageWithBody(ctx context.Context, packageId string, params *UploadEncryptedMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadEncryptedMessageRequestWithBody(c.Server, packageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadEncryptedMessage(ctx context.Context, packageId string, params *UploadEncryptedMessageParams, body UploadEncryptedMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadEncryptedMessageRequest(c.Server, packageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackagePackageIdMessageChecksum(ctx context.Context, packageId string, checksum string, params *GetPackagePackageIdMessageChecksumParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagePackageIdMessageChecksumRequest(c.Server, packageId, checksum, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryId(ctx context.Context, packageId string, sourcedirectoryId string, targetdirectoryId string, params *PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdRequest(c.Server, packageId, sourcedirectoryId, targetdirectoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackagePackageIdPublicKeys(ctx context.Context, packageId string, params *GetPackagePackageIdPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagePackageIdPublicKeysRequest(c.Server, packageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRecipientWithBody(ctx context.Context, packageId string, params *AddRecipientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRecipientRequestWithBody(c.Server, packageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRecipient(ctx context.Context, packageId string, params *AddRecipientParams, body AddRecipientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRecipientRequest(c.Server, packageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePackagePackageIdRecipientRecipientId(ctx context.Context, packageId string, recipientId string, params *DeletePackagePackageIdRecipientRecipientIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePackagePackageIdRecipientRecipientIdRequest(c.Server, packageId, recipientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackagePackageIdRecipientRecipientId(ctx context.Context, packageId string, recipientId string, params *GetPackagePackageIdRecipientRecipientIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagePackageIdRecipientRecipientIdRequest(c.Server, packageId, recipientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdRecipientRecipientIdWithBody(ctx context.Context, packageId string, recipientId string, params *PostPackagePackageIdRecipientRecipientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdRecipientRecipientIdRequestWithBody(c.Server, packageId, recipientId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPackagePackageIdRecipientRecipientId(ctx context.Context, packageId string, recipientId string, params *PostPackagePackageIdRecipientRecipientIdParams, body PostPackagePackageIdRecipientRecipientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPackagePackageIdRecipientRecipientIdRequest(c.Server, packageId, recipientId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPackagePackageIdRecipientsWithBody(ctx context.Context, packageId string, params *PutPackagePackageIdRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPackagePackageIdRecipientsRequestWithBody(c.Server, packageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPackagePackageIdRecipients(ctx context.Context, packageId string, params *PutPackagePackageIdRecipientsParams, body PutPackagePackageIdRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPackagePackageIdRecipientsRequest(c.Server, packageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePackagePackageIdTemp(ctx context.Context, packageId string, params *DeletePackagePackageIdTempParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePackagePackageIdTempRequest(c.Server, packageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackagePackageIdRecipientIdPublicKeys(ctx context.Context, packageId string, recipientId string, params *GetPackagePackageIdRecipientIdPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagePackageIdRecipientIdPublicKeysRequest(c.Server, packageId, recipientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicKeyWithBody(ctx context.Context, params *PutPublicKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicKeyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicKey(ctx context.Context, params *PutPublicKeyParams, body PutPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicKeyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePublicKeyPublicKeyId(ctx context.Context, publicKeyId string, params *DeletePublicKeyPublicKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePublicKeyPublicKeyIdRequest(c.Server, publicKeyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicKeyPublicKeyId(ctx context.Context, publicKeyId string, params *GetPublicKeyPublicKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicKeyPublicKeyIdRequest(c.Server, publicKeyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipientHistoryRecipientEmail(ctx context.Context, recipientEmail string, params *GetRecipientHistoryRecipientEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipientHistoryRecipientEmailRequest(c.Server, recipientEmail, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSyncPublicKeyId(ctx context.Context, publicKeyId string, params *GetSyncPublicKeyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSyncPublicKeyIdRequest(c.Server, publicKeyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserDropzoneRecipients(ctx context.Context, params *DeleteUserDropzoneRecipientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserDropzoneRecipientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserDropzoneRecipients(ctx context.Context, params *GetUserDropzoneRecipientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserDropzoneRecipientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserDropzoneRecipientsWithBody(ctx context.Context, params *PutUserDropzoneRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserDropzoneRecipientsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserDropzoneRecipients(ctx context.Context, params *PutUserDropzoneRecipientsParams, body PutUserDropzoneRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserDropzoneRecipientsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroups(ctx context.Context, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdDropzoneConfigWithBody(ctx context.Context, userId string, params *PostUserUserIdDropzoneConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdDropzoneConfigRequestWithBody(c.Server, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdDropzoneConfig(ctx context.Context, userId string, params *PostUserUserIdDropzoneConfigParams, body PostUserUserIdDropzoneConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdDropzoneConfigRequest(c.Server, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetConfigVerifyCredentialsRequest generates requests for GetConfigVerifyCredentials
func NewGetConfigVerifyCredentialsRequest(server string, params *GetConfigVerifyCredentialsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/verify-credentials/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewGetEnterpriseRequest generates requests for GetEnterprise
func NewGetEnterpriseRequest(server string, params *GetEnterpriseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enterprise/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewGetEnterpriseGroupsRequest generates requests for GetEnterpriseGroups
func NewGetEnterpriseGroupsRequest(server string, params *GetEnterpriseGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enterprise/groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewGetGetIdentityCookieRequest generates requests for GetGetIdentityCookie
func NewGetGetIdentityCookieRequest(server string, params *GetGetIdentityCookieParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-identity-cookie/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewPutGroupRequest calls the generic PutGroup builder with application/json body
func NewPutGroupRequest(server string, params *PutGroupParams, body PutGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutGroupRequestWithBody generates requests for PutGroup with any type of body
func NewPutGroupRequestWithBody(server string, params *PutGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewDeleteGroupGroupIdRequest generates requests for DeleteGroupGroupId
func NewDeleteGroupGroupIdRequest(server string, groupId string, params *DeleteGroupGroupIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPutGroupGroupIdUserRequest calls the generic PutGroupGroupIdUser builder with application/json body
func NewPutGroupGroupIdUserRequest(server string, groupId string, params *PutGroupGroupIdUserParams, body PutGroupGroupIdUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupGroupIdUserRequestWithBody(server, groupId, params, "application/json", bodyReader)
}

// NewPutGroupGroupIdUserRequestWithBody generates requests for PutGroupGroupIdUser with any type of body
func NewPutGroupGroupIdUserRequestWithBody(server string, groupId string, params *PutGroupGroupIdUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/%s/user/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewDeleteGroupGroupIdUserIdRequest generates requests for DeleteGroupGroupIdUserId
func NewDeleteGroupGroupIdUserIdRequest(server string, groupId string, userId string, params *DeleteGroupGroupIdUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/%s/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewGetPackageRequest generates requests for GetPackage
func NewGetPackageRequest(server string, params *GetPackageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.RowIndex != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rowIndex", runtime.ParamLocationQuery, *params.RowIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewCreatePackageRequest calls the generic CreatePackage builder with application/json body
func NewCreatePackageRequest(server string, params *CreatePackageParams, body CreatePackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePackageRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePackageRequestWithBody generates requests for CreatePackage with any type of body
func NewCreatePackageRequestWithBody(server string, params *CreatePackageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewGetPackageArchivedRequest generates requests for GetPackageArchived
func NewGetPackageArchivedRequest(server string, params *GetPackageArchivedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/archived/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.RowIndex != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rowIndex", runtime.ParamLocationQuery, *params.RowIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewGetOrganizationPackagesRequest calls the generic GetOrganizationPackages builder with application/json body
func NewGetOrganizationPackagesRequest(server string, params *GetOrganizationPackagesParams, body GetOrganizationPackagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetOrganizationPackagesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetOrganizationPackagesRequestWithBody generates requests for GetOrganizationPackages with any type of body
func NewGetOrganizationPackagesRequestWithBody(server string, params *GetOrganizationPackagesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/organization/search/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.RowIndex != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rowIndex", runtime.ParamLocationQuery, *params.RowIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewGetPackageReceivedRequest generates requests for GetPackageReceived
func NewGetPackageReceivedRequest(server string, params *GetPackageReceivedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/received/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.RowIndex != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rowIndex", runtime.ParamLocationQuery, *params.RowIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewGetPackageWorkspacesRequest generates requests for GetPackageWorkspaces
func NewGetPackageWorkspacesRequest(server string, params *GetPackageWorkspacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/workspaces/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.RowIndex != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rowIndex", runtime.ParamLocationQuery, *params.RowIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortField", runtime.ParamLocationQuery, *params.SortField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewDeletePackagePackageIdRequest generates requests for DeletePackagePackageId
func NewDeletePackagePackageIdRequest(server string, packageId string, params *DeletePackagePackageIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewGetPackageInformationRequest generates requests for GetPackageInformation
func NewGetPackageInformationRequest(server string, packageId string, params *GetPackageInformationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewPostPackagePackageIdRequest calls the generic PostPackagePackageId builder with application/json body
func NewPostPackagePackageIdRequest(server string, packageId string, params *PostPackagePackageIdParams, body PostPackagePackageIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPackagePackageIdRequestWithBody(server, packageId, params, "application/json", bodyReader)
}

// NewPostPackagePackageIdRequestWithBody generates requests for PostPackagePackageId with any type of body
func NewPostPackagePackageIdRequestWithBody(server string, packageId string, params *PostPackagePackageIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPostPackagePackageIdActivityLogRequest generates requests for PostPackagePackageIdActivityLog
func NewPostPackagePackageIdActivityLogRequest(server string, packageId string, params *PostPackagePackageIdActivityLogParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/activityLog/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewGetPackagePackageIdDirectoryDirectoryIdRequest generates requests for GetPackagePackageIdDirectoryDirectoryId
func NewGetPackagePackageIdDirectoryDirectoryIdRequest(server string, packageId string, directoryId string, params *GetPackagePackageIdDirectoryDirectoryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "directoryId", runtime.ParamLocationPath, directoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/directory/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DirectoryIndex != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "directoryIndex", runtime.ParamLocationQuery, *params.DirectoryIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileIndex != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileIndex", runtime.ParamLocationQuery, *params.FileIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortField", runtime.ParamLocationQuery, *params.SortField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPostPackagePackageIdDirectoryDirectoryIdRequest calls the generic PostPackagePackageIdDirectoryDirectoryId builder with application/json body
func NewPostPackagePackageIdDirectoryDirectoryIdRequest(server string, packageId string, directoryId string, params *PostPackagePackageIdDirectoryDirectoryIdParams, body PostPackagePackageIdDirectoryDirectoryIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPackagePackageIdDirectoryDirectoryIdRequestWithBody(server, packageId, directoryId, params, "application/json", bodyReader)
}

// NewPostPackagePackageIdDirectoryDirectoryIdRequestWithBody generates requests for PostPackagePackageIdDirectoryDirectoryId with any type of body
func NewPostPackagePackageIdDirectoryDirectoryIdRequestWithBody(server string, packageId string, directoryId string, params *PostPackagePackageIdDirectoryDirectoryIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "directoryId", runtime.ParamLocationPath, directoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/directory/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewDeletePackagePackageIdDirectoryDirectoryIdRequest generates requests for DeletePackagePackageIdDirectoryDirectoryId
func NewDeletePackagePackageIdDirectoryDirectoryIdRequest(server string, packageId string, directoryId string, params *DeletePackagePackageIdDirectoryDirectoryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "directoryId", runtime.ParamLocationPath, directoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/directory/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewGetPackagePackageIdDirectoryDirectoryIdFileFileIdRequest generates requests for GetPackagePackageIdDirectoryDirectoryIdFileFileId
func NewGetPackagePackageIdDirectoryDirectoryIdFileFileIdRequest(server string, packageId string, directoryId string, fileId string, params *GetPackagePackageIdDirectoryDirectoryIdFileFileIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "directoryId", runtime.ParamLocationPath, directoryId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/directory/%s/file/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewDeletePackagePackageIdDirectoryDirectoryIdFileFileIdRequest generates requests for DeletePackagePackageIdDirectoryDirectoryIdFileFileId
func NewDeletePackagePackageIdDirectoryDirectoryIdFileFileIdRequest(server string, packageId string, directoryId string, fileId string, params *DeletePackagePackageIdDirectoryDirectoryIdFileFileIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "directoryId", runtime.ParamLocationPath, directoryId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/directory/%s/file/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPostPackagePackageIdDirectoryDirectoryIdFileFileIdRequest generates requests for PostPackagePackageIdDirectoryDirectoryIdFileFileId
func NewPostPackagePackageIdDirectoryDirectoryIdFileFileIdRequest(server string, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "directoryId", runtime.ParamLocationPath, directoryId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/directory/%s/file/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsRequest calls the generic PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrls builder with application/json body
func NewPostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsRequest(server string, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsParams, body PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsRequestWithBody(server, packageId, directoryId, fileId, params, "application/json", bodyReader)
}

// NewPostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsRequestWithBody generates requests for PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrls with any type of body
func NewPostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsRequestWithBody(server string, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "directoryId", runtime.ParamLocationPath, directoryId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/directory/%s/file/%s/download-urls/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPutPackagePackageIdDirectoryDirectoryIdSubdirectoryRequest calls the generic PutPackagePackageIdDirectoryDirectoryIdSubdirectory builder with application/json body
func NewPutPackagePackageIdDirectoryDirectoryIdSubdirectoryRequest(server string, packageId string, directoryId string, params *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryParams, body PutPackagePackageIdDirectoryDirectoryIdSubdirectoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPackagePackageIdDirectoryDirectoryIdSubdirectoryRequestWithBody(server, packageId, directoryId, params, "application/json", bodyReader)
}

// NewPutPackagePackageIdDirectoryDirectoryIdSubdirectoryRequestWithBody generates requests for PutPackagePackageIdDirectoryDirectoryIdSubdirectory with any type of body
func NewPutPackagePackageIdDirectoryDirectoryIdSubdirectoryRequestWithBody(server string, packageId string, directoryId string, params *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "directoryId", runtime.ParamLocationPath, directoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/directory/%s/subdirectory/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewCreateFileRequest calls the generic CreateFile builder with application/json body
func NewCreateFileRequest(server string, packageId string, params *CreateFileParams, body CreateFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFileRequestWithBody(server, packageId, params, "application/json", bodyReader)
}

// NewCreateFileRequestWithBody generates requests for CreateFile with any type of body
func NewCreateFileRequestWithBody(server string, packageId string, params *CreateFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewDeletePackagePackageIdFileFileIdRequest generates requests for DeletePackagePackageIdFileFileId
func NewDeletePackagePackageIdFileFileIdRequest(server string, packageId string, fileId string, params *DeletePackagePackageIdFileFileIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/file/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewGetPackagePackageIdFileFileIdRequest generates requests for GetPackagePackageIdFileFileId
func NewGetPackagePackageIdFileFileIdRequest(server string, packageId string, fileId string, params *GetPackagePackageIdFileFileIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/file/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPostPackagePackageIdFileFileIdCopyRequest calls the generic PostPackagePackageIdFileFileIdCopy builder with application/json body
func NewPostPackagePackageIdFileFileIdCopyRequest(server string, packageId string, fileId string, params *PostPackagePackageIdFileFileIdCopyParams, body PostPackagePackageIdFileFileIdCopyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPackagePackageIdFileFileIdCopyRequestWithBody(server, packageId, fileId, params, "application/json", bodyReader)
}

// NewPostPackagePackageIdFileFileIdCopyRequestWithBody generates requests for PostPackagePackageIdFileFileIdCopy with any type of body
func NewPostPackagePackageIdFileFileIdCopyRequestWithBody(server string, packageId string, fileId string, params *PostPackagePackageIdFileFileIdCopyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/file/%s/copy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewPostPackagePackageIdFileFileIdDownloadUrlsRequest calls the generic PostPackagePackageIdFileFileIdDownloadUrls builder with application/json body
func NewPostPackagePackageIdFileFileIdDownloadUrlsRequest(server string, packageId string, fileId string, params *PostPackagePackageIdFileFileIdDownloadUrlsParams, body PostPackagePackageIdFileFileIdDownloadUrlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPackagePackageIdFileFileIdDownloadUrlsRequestWithBody(server, packageId, fileId, params, "application/json", bodyReader)
}

// NewPostPackagePackageIdFileFileIdDownloadUrlsRequestWithBody generates requests for PostPackagePackageIdFileFileIdDownloadUrls with any type of body
func NewPostPackagePackageIdFileFileIdDownloadUrlsRequestWithBody(server string, packageId string, fileId string, params *PostPackagePackageIdFileFileIdDownloadUrlsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/file/%s/download-urls/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewUploadCompleteRequest calls the generic UploadComplete builder with application/json body
func NewUploadCompleteRequest(server string, packageId string, fileId string, params *UploadCompleteParams, body UploadCompleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUploadCompleteRequestWithBody(server, packageId, fileId, params, "application/json", bodyReader)
}

// NewUploadCompleteRequestWithBody generates requests for UploadComplete with any type of body
func NewUploadCompleteRequestWithBody(server string, packageId string, fileId string, params *UploadCompleteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/file/%s/upload-complete/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewGetUploadUrlsRequest calls the generic GetUploadUrls builder with application/json body
func NewGetUploadUrlsRequest(server string, packageId string, fileId string, params *GetUploadUrlsParams, body GetUploadUrlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUploadUrlsRequestWithBody(server, packageId, fileId, params, "application/json", bodyReader)
}

// NewGetUploadUrlsRequestWithBody generates requests for GetUploadUrls with any type of body
func NewGetUploadUrlsRequestWithBody(server string, packageId string, fileId string, params *GetUploadUrlsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/file/%s/upload-urls/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewFinalizePackageRequest calls the generic FinalizePackage builder with application/json body
func NewFinalizePackageRequest(server string, packageId string, params *FinalizePackageParams, body FinalizePackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFinalizePackageRequestWithBody(server, packageId, params, "application/json", bodyReader)
}

// NewFinalizePackageRequestWithBody generates requests for FinalizePackage with any type of body
func NewFinalizePackageRequestWithBody(server string, packageId string, params *FinalizePackageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/finalize/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewDeletePackagePackageIdGroupGroupIdRequest generates requests for DeletePackagePackageIdGroupGroupId
func NewDeletePackagePackageIdGroupGroupIdRequest(server string, packageId string, groupId string, params *DeletePackagePackageIdGroupGroupIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/group/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPutPackagePackageIdGroupGroupIdRequest generates requests for PutPackagePackageIdGroupGroupId
func NewPutPackagePackageIdGroupGroupIdRequest(server string, packageId string, groupId string, params *PutPackagePackageIdGroupGroupIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/group/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewGetPackagePackageIdLinkPublicKeyIdRequest generates requests for GetPackagePackageIdLinkPublicKeyId
func NewGetPackagePackageIdLinkPublicKeyIdRequest(server string, packageId string, publicKeyId string, params *GetPackagePackageIdLinkPublicKeyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "publicKeyId", runtime.ParamLocationPath, publicKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/link/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewPutPackagePackageIdLinkPublicKeyIdRequest generates requests for PutPackagePackageIdLinkPublicKeyId
func NewPutPackagePackageIdLinkPublicKeyIdRequest(server string, packageId string, publicKeyId string, params *PutPackagePackageIdLinkPublicKeyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "publicKeyId", runtime.ParamLocationPath, publicKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/link/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewUploadEncryptedMessageRequest calls the generic UploadEncryptedMessage builder with application/json body
func NewUploadEncryptedMessageRequest(server string, packageId string, params *UploadEncryptedMessageParams, body UploadEncryptedMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUploadEncryptedMessageRequestWithBody(server, packageId, params, "application/json", bodyReader)
}

// NewUploadEncryptedMessageRequestWithBody generates requests for UploadEncryptedMessage with any type of body
func NewUploadEncryptedMessageRequestWithBody(server string, packageId string, params *UploadEncryptedMessageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/message/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewGetPackagePackageIdMessageChecksumRequest generates requests for GetPackagePackageIdMessageChecksum
func NewGetPackagePackageIdMessageChecksumRequest(server string, packageId string, checksum string, params *GetPackagePackageIdMessageChecksumParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "checksum", runtime.ParamLocationPath, checksum)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/message/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdRequest generates requests for PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryId
func NewPostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdRequest(server string, packageId string, sourcedirectoryId string, targetdirectoryId string, params *PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sourcedirectoryId", runtime.ParamLocationPath, sourcedirectoryId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "targetdirectoryId", runtime.ParamLocationPath, targetdirectoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/move/%s/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewGetPackagePackageIdPublicKeysRequest generates requests for GetPackagePackageIdPublicKeys
func NewGetPackagePackageIdPublicKeysRequest(server string, packageId string, params *GetPackagePackageIdPublicKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/public-keys/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewAddRecipientRequest calls the generic AddRecipient builder with application/json body
func NewAddRecipientRequest(server string, packageId string, params *AddRecipientParams, body AddRecipientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRecipientRequestWithBody(server, packageId, params, "application/json", bodyReader)
}

// NewAddRecipientRequestWithBody generates requests for AddRecipient with any type of body
func NewAddRecipientRequestWithBody(server string, packageId string, params *AddRecipientParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/recipient/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewDeletePackagePackageIdRecipientRecipientIdRequest generates requests for DeletePackagePackageIdRecipientRecipientId
func NewDeletePackagePackageIdRecipientRecipientIdRequest(server string, packageId string, recipientId string, params *DeletePackagePackageIdRecipientRecipientIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipientId", runtime.ParamLocationPath, recipientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/recipient/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewGetPackagePackageIdRecipientRecipientIdRequest generates requests for GetPackagePackageIdRecipientRecipientId
func NewGetPackagePackageIdRecipientRecipientIdRequest(server string, packageId string, recipientId string, params *GetPackagePackageIdRecipientRecipientIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipientId", runtime.ParamLocationPath, recipientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/recipient/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPostPackagePackageIdRecipientRecipientIdRequest calls the generic PostPackagePackageIdRecipientRecipientId builder with application/json body
func NewPostPackagePackageIdRecipientRecipientIdRequest(server string, packageId string, recipientId string, params *PostPackagePackageIdRecipientRecipientIdParams, body PostPackagePackageIdRecipientRecipientIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPackagePackageIdRecipientRecipientIdRequestWithBody(server, packageId, recipientId, params, "application/json", bodyReader)
}

// NewPostPackagePackageIdRecipientRecipientIdRequestWithBody generates requests for PostPackagePackageIdRecipientRecipientId with any type of body
func NewPostPackagePackageIdRecipientRecipientIdRequestWithBody(server string, packageId string, recipientId string, params *PostPackagePackageIdRecipientRecipientIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipientId", runtime.ParamLocationPath, recipientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/recipient/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPutPackagePackageIdRecipientsRequest calls the generic PutPackagePackageIdRecipients builder with application/json body
func NewPutPackagePackageIdRecipientsRequest(server string, packageId string, params *PutPackagePackageIdRecipientsParams, body PutPackagePackageIdRecipientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPackagePackageIdRecipientsRequestWithBody(server, packageId, params, "application/json", bodyReader)
}

// NewPutPackagePackageIdRecipientsRequestWithBody generates requests for PutPackagePackageIdRecipients with any type of body
func NewPutPackagePackageIdRecipientsRequestWithBody(server string, packageId string, params *PutPackagePackageIdRecipientsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/recipients/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewDeletePackagePackageIdTempRequest generates requests for DeletePackagePackageIdTemp
func NewDeletePackagePackageIdTempRequest(server string, packageId string, params *DeletePackagePackageIdTempParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/temp/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam2)

	return req, nil
}

// NewGetPackagePackageIdRecipientIdPublicKeysRequest generates requests for GetPackagePackageIdRecipientIdPublicKeys
func NewGetPackagePackageIdRecipientIdPublicKeysRequest(server string, packageId string, recipientId string, params *GetPackagePackageIdRecipientIdPublicKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipientId", runtime.ParamLocationPath, recipientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/package/%s/%s/public-keys/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewPutPublicKeyRequest calls the generic PutPublicKey builder with application/json body
func NewPutPublicKeyRequest(server string, params *PutPublicKeyParams, body PutPublicKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPublicKeyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutPublicKeyRequestWithBody generates requests for PutPublicKey with any type of body
func NewPutPublicKeyRequestWithBody(server string, params *PutPublicKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public-key/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewDeletePublicKeyPublicKeyIdRequest generates requests for DeletePublicKeyPublicKeyId
func NewDeletePublicKeyPublicKeyIdRequest(server string, publicKeyId string, params *DeletePublicKeyPublicKeyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "publicKeyId", runtime.ParamLocationPath, publicKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public-key/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewGetPublicKeyPublicKeyIdRequest generates requests for GetPublicKeyPublicKeyId
func NewGetPublicKeyPublicKeyIdRequest(server string, publicKeyId string, params *GetPublicKeyPublicKeyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "publicKeyId", runtime.ParamLocationPath, publicKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public-key/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewGetRecipientHistoryRecipientEmailRequest generates requests for GetRecipientHistoryRecipientEmail
func NewGetRecipientHistoryRecipientEmailRequest(server string, recipientEmail string, params *GetRecipientHistoryRecipientEmailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipientEmail", runtime.ParamLocationPath, recipientEmail)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipient/history/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewGetSyncPublicKeyIdRequest generates requests for GetSyncPublicKeyId
func NewGetSyncPublicKeyIdRequest(server string, publicKeyId string, params *GetSyncPublicKeyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "publicKeyId", runtime.ParamLocationPath, publicKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, params *GetUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewDeleteUserDropzoneRecipientsRequest generates requests for DeleteUserDropzoneRecipients
func NewDeleteUserDropzoneRecipientsRequest(server string, params *DeleteUserDropzoneRecipientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/dropzone-recipients/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewGetUserDropzoneRecipientsRequest generates requests for GetUserDropzoneRecipients
func NewGetUserDropzoneRecipientsRequest(server string, params *GetUserDropzoneRecipientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/dropzone-recipients/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewPutUserDropzoneRecipientsRequest calls the generic PutUserDropzoneRecipients builder with application/json body
func NewPutUserDropzoneRecipientsRequest(server string, params *PutUserDropzoneRecipientsParams, body PutUserDropzoneRecipientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserDropzoneRecipientsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutUserDropzoneRecipientsRequestWithBody generates requests for PutUserDropzoneRecipients with any type of body
func NewPutUserDropzoneRecipientsRequestWithBody(server string, params *PutUserDropzoneRecipientsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/dropzone-recipients/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

// NewGetUserGroupsRequest generates requests for GetUserGroups
func NewGetUserGroupsRequest(server string, params *GetUserGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	return req, nil
}

// NewPostUserUserIdDropzoneConfigRequest calls the generic PostUserUserIdDropzoneConfig builder with application/json body
func NewPostUserUserIdDropzoneConfigRequest(server string, userId string, params *PostUserUserIdDropzoneConfigParams, body PostUserUserIdDropzoneConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdDropzoneConfigRequestWithBody(server, userId, params, "application/json", bodyReader)
}

// NewPostUserUserIdDropzoneConfigRequestWithBody generates requests for PostUserUserIdDropzoneConfig with any type of body
func NewPostUserUserIdDropzoneConfigRequestWithBody(server string, userId string, params *PostUserUserIdDropzoneConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/dropzone/config/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ss-api-key", runtime.ParamLocationHeader, params.SsApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-api-key", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ss-request-signature", runtime.ParamLocationHeader, params.SsRequestSignature)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-signature", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "ss-request-timestamp", runtime.ParamLocationHeader, params.SsRequestTimestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("ss-request-timestamp", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("content-type", headerParam3)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetConfigVerifyCredentials request
	GetConfigVerifyCredentialsWithResponse(ctx context.Context, params *GetConfigVerifyCredentialsParams, reqEditors ...RequestEditorFn) (*GetConfigVerifyCredentialsResponse, error)

	// GetEnterprise request
	GetEnterpriseWithResponse(ctx context.Context, params *GetEnterpriseParams, reqEditors ...RequestEditorFn) (*GetEnterpriseResponse, error)

	// GetEnterpriseGroups request
	GetEnterpriseGroupsWithResponse(ctx context.Context, params *GetEnterpriseGroupsParams, reqEditors ...RequestEditorFn) (*GetEnterpriseGroupsResponse, error)

	// GetGetIdentityCookie request
	GetGetIdentityCookieWithResponse(ctx context.Context, params *GetGetIdentityCookieParams, reqEditors ...RequestEditorFn) (*GetGetIdentityCookieResponse, error)

	// PutGroup request with any body
	PutGroupWithBodyWithResponse(ctx context.Context, params *PutGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupResponse, error)

	PutGroupWithResponse(ctx context.Context, params *PutGroupParams, body PutGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupResponse, error)

	// DeleteGroupGroupId request
	DeleteGroupGroupIdWithResponse(ctx context.Context, groupId string, params *DeleteGroupGroupIdParams, reqEditors ...RequestEditorFn) (*DeleteGroupGroupIdResponse, error)

	// PutGroupGroupIdUser request with any body
	PutGroupGroupIdUserWithBodyWithResponse(ctx context.Context, groupId string, params *PutGroupGroupIdUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupGroupIdUserResponse, error)

	PutGroupGroupIdUserWithResponse(ctx context.Context, groupId string, params *PutGroupGroupIdUserParams, body PutGroupGroupIdUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupGroupIdUserResponse, error)

	// DeleteGroupGroupIdUserId request
	DeleteGroupGroupIdUserIdWithResponse(ctx context.Context, groupId string, userId string, params *DeleteGroupGroupIdUserIdParams, reqEditors ...RequestEditorFn) (*DeleteGroupGroupIdUserIdResponse, error)

	// GetPackage request
	GetPackageWithResponse(ctx context.Context, params *GetPackageParams, reqEditors ...RequestEditorFn) (*GetPackageResponse, error)

	// CreatePackage request with any body
	CreatePackageWithBodyWithResponse(ctx context.Context, params *CreatePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePackageResponse, error)

	CreatePackageWithResponse(ctx context.Context, params *CreatePackageParams, body CreatePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePackageResponse, error)

	// GetPackageArchived request
	GetPackageArchivedWithResponse(ctx context.Context, params *GetPackageArchivedParams, reqEditors ...RequestEditorFn) (*GetPackageArchivedResponse, error)

	// GetOrganizationPackages request with any body
	GetOrganizationPackagesWithBodyWithResponse(ctx context.Context, params *GetOrganizationPackagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrganizationPackagesResponse, error)

	GetOrganizationPackagesWithResponse(ctx context.Context, params *GetOrganizationPackagesParams, body GetOrganizationPackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOrganizationPackagesResponse, error)

	// GetPackageReceived request
	GetPackageReceivedWithResponse(ctx context.Context, params *GetPackageReceivedParams, reqEditors ...RequestEditorFn) (*GetPackageReceivedResponse, error)

	// GetPackageWorkspaces request
	GetPackageWorkspacesWithResponse(ctx context.Context, params *GetPackageWorkspacesParams, reqEditors ...RequestEditorFn) (*GetPackageWorkspacesResponse, error)

	// DeletePackagePackageId request
	DeletePackagePackageIdWithResponse(ctx context.Context, packageId string, params *DeletePackagePackageIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdResponse, error)

	// GetPackageInformation request
	GetPackageInformationWithResponse(ctx context.Context, packageId string, params *GetPackageInformationParams, reqEditors ...RequestEditorFn) (*GetPackageInformationResponse, error)

	// PostPackagePackageId request with any body
	PostPackagePackageIdWithBodyWithResponse(ctx context.Context, packageId string, params *PostPackagePackageIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdResponse, error)

	PostPackagePackageIdWithResponse(ctx context.Context, packageId string, params *PostPackagePackageIdParams, body PostPackagePackageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdResponse, error)

	// PostPackagePackageIdActivityLog request
	PostPackagePackageIdActivityLogWithResponse(ctx context.Context, packageId string, params *PostPackagePackageIdActivityLogParams, reqEditors ...RequestEditorFn) (*PostPackagePackageIdActivityLogResponse, error)

	// GetPackagePackageIdDirectoryDirectoryId request
	GetPackagePackageIdDirectoryDirectoryIdWithResponse(ctx context.Context, packageId string, directoryId string, params *GetPackagePackageIdDirectoryDirectoryIdParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdDirectoryDirectoryIdResponse, error)

	// PostPackagePackageIdDirectoryDirectoryId request with any body
	PostPackagePackageIdDirectoryDirectoryIdWithBodyWithResponse(ctx context.Context, packageId string, directoryId string, params *PostPackagePackageIdDirectoryDirectoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdDirectoryDirectoryIdResponse, error)

	PostPackagePackageIdDirectoryDirectoryIdWithResponse(ctx context.Context, packageId string, directoryId string, params *PostPackagePackageIdDirectoryDirectoryIdParams, body PostPackagePackageIdDirectoryDirectoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdDirectoryDirectoryIdResponse, error)

	// DeletePackagePackageIdDirectoryDirectoryId request
	DeletePackagePackageIdDirectoryDirectoryIdWithResponse(ctx context.Context, packageId string, directoryId string, params *DeletePackagePackageIdDirectoryDirectoryIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdDirectoryDirectoryIdResponse, error)

	// GetPackagePackageIdDirectoryDirectoryIdFileFileId request
	GetPackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse(ctx context.Context, packageId string, directoryId string, fileId string, params *GetPackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse, error)

	// DeletePackagePackageIdDirectoryDirectoryIdFileFileId request
	DeletePackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse(ctx context.Context, packageId string, directoryId string, fileId string, params *DeletePackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse, error)

	// PostPackagePackageIdDirectoryDirectoryIdFileFileId request
	PostPackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*PostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse, error)

	// PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrls request with any body
	PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsWithBodyWithResponse(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse, error)

	PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsWithResponse(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsParams, body PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse, error)

	// PutPackagePackageIdDirectoryDirectoryIdSubdirectory request with any body
	PutPackagePackageIdDirectoryDirectoryIdSubdirectoryWithBodyWithResponse(ctx context.Context, packageId string, directoryId string, params *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse, error)

	PutPackagePackageIdDirectoryDirectoryIdSubdirectoryWithResponse(ctx context.Context, packageId string, directoryId string, params *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryParams, body PutPackagePackageIdDirectoryDirectoryIdSubdirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse, error)

	// CreateFile request with any body
	CreateFileWithBodyWithResponse(ctx context.Context, packageId string, params *CreateFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFileResponse, error)

	CreateFileWithResponse(ctx context.Context, packageId string, params *CreateFileParams, body CreateFileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFileResponse, error)

	// DeletePackagePackageIdFileFileId request
	DeletePackagePackageIdFileFileIdWithResponse(ctx context.Context, packageId string, fileId string, params *DeletePackagePackageIdFileFileIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdFileFileIdResponse, error)

	// GetPackagePackageIdFileFileId request
	GetPackagePackageIdFileFileIdWithResponse(ctx context.Context, packageId string, fileId string, params *GetPackagePackageIdFileFileIdParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdFileFileIdResponse, error)

	// PostPackagePackageIdFileFileIdCopy request with any body
	PostPackagePackageIdFileFileIdCopyWithBodyWithResponse(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdCopyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdFileFileIdCopyResponse, error)

	PostPackagePackageIdFileFileIdCopyWithResponse(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdCopyParams, body PostPackagePackageIdFileFileIdCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdFileFileIdCopyResponse, error)

	// PostPackagePackageIdFileFileIdDownloadUrls request with any body
	PostPackagePackageIdFileFileIdDownloadUrlsWithBodyWithResponse(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdDownloadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdFileFileIdDownloadUrlsResponse, error)

	PostPackagePackageIdFileFileIdDownloadUrlsWithResponse(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdDownloadUrlsParams, body PostPackagePackageIdFileFileIdDownloadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdFileFileIdDownloadUrlsResponse, error)

	// UploadComplete request with any body
	UploadCompleteWithBodyWithResponse(ctx context.Context, packageId string, fileId string, params *UploadCompleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadCompleteResponse, error)

	UploadCompleteWithResponse(ctx context.Context, packageId string, fileId string, params *UploadCompleteParams, body UploadCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadCompleteResponse, error)

	// GetUploadUrls request with any body
	GetUploadUrlsWithBodyWithResponse(ctx context.Context, packageId string, fileId string, params *GetUploadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUploadUrlsResponse, error)

	GetUploadUrlsWithResponse(ctx context.Context, packageId string, fileId string, params *GetUploadUrlsParams, body GetUploadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUploadUrlsResponse, error)

	// FinalizePackage request with any body
	FinalizePackageWithBodyWithResponse(ctx context.Context, packageId string, params *FinalizePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinalizePackageResponse, error)

	FinalizePackageWithResponse(ctx context.Context, packageId string, params *FinalizePackageParams, body FinalizePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*FinalizePackageResponse, error)

	// DeletePackagePackageIdGroupGroupId request
	DeletePackagePackageIdGroupGroupIdWithResponse(ctx context.Context, packageId string, groupId string, params *DeletePackagePackageIdGroupGroupIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdGroupGroupIdResponse, error)

	// PutPackagePackageIdGroupGroupId request
	PutPackagePackageIdGroupGroupIdWithResponse(ctx context.Context, packageId string, groupId string, params *PutPackagePackageIdGroupGroupIdParams, reqEditors ...RequestEditorFn) (*PutPackagePackageIdGroupGroupIdResponse, error)

	// GetPackagePackageIdLinkPublicKeyId request
	GetPackagePackageIdLinkPublicKeyIdWithResponse(ctx context.Context, packageId string, publicKeyId string, params *GetPackagePackageIdLinkPublicKeyIdParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdLinkPublicKeyIdResponse, error)

	// PutPackagePackageIdLinkPublicKeyId request
	PutPackagePackageIdLinkPublicKeyIdWithResponse(ctx context.Context, packageId string, publicKeyId string, params *PutPackagePackageIdLinkPublicKeyIdParams, reqEditors ...RequestEditorFn) (*PutPackagePackageIdLinkPublicKeyIdResponse, error)

	// UploadEncryptedMessage request with any body
	UploadEncryptedMessageWithBodyWithResponse(ctx context.Context, packageId string, params *UploadEncryptedMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadEncryptedMessageResponse, error)

	UploadEncryptedMessageWithResponse(ctx context.Context, packageId string, params *UploadEncryptedMessageParams, body UploadEncryptedMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadEncryptedMessageResponse, error)

	// GetPackagePackageIdMessageChecksum request
	GetPackagePackageIdMessageChecksumWithResponse(ctx context.Context, packageId string, checksum string, params *GetPackagePackageIdMessageChecksumParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdMessageChecksumResponse, error)

	// PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryId request
	PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdWithResponse(ctx context.Context, packageId string, sourcedirectoryId string, targetdirectoryId string, params *PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdParams, reqEditors ...RequestEditorFn) (*PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse, error)

	// GetPackagePackageIdPublicKeys request
	GetPackagePackageIdPublicKeysWithResponse(ctx context.Context, packageId string, params *GetPackagePackageIdPublicKeysParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdPublicKeysResponse, error)

	// AddRecipient request with any body
	AddRecipientWithBodyWithResponse(ctx context.Context, packageId string, params *AddRecipientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRecipientResponse, error)

	AddRecipientWithResponse(ctx context.Context, packageId string, params *AddRecipientParams, body AddRecipientJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRecipientResponse, error)

	// DeletePackagePackageIdRecipientRecipientId request
	DeletePackagePackageIdRecipientRecipientIdWithResponse(ctx context.Context, packageId string, recipientId string, params *DeletePackagePackageIdRecipientRecipientIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdRecipientRecipientIdResponse, error)

	// GetPackagePackageIdRecipientRecipientId request
	GetPackagePackageIdRecipientRecipientIdWithResponse(ctx context.Context, packageId string, recipientId string, params *GetPackagePackageIdRecipientRecipientIdParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdRecipientRecipientIdResponse, error)

	// PostPackagePackageIdRecipientRecipientId request with any body
	PostPackagePackageIdRecipientRecipientIdWithBodyWithResponse(ctx context.Context, packageId string, recipientId string, params *PostPackagePackageIdRecipientRecipientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdRecipientRecipientIdResponse, error)

	PostPackagePackageIdRecipientRecipientIdWithResponse(ctx context.Context, packageId string, recipientId string, params *PostPackagePackageIdRecipientRecipientIdParams, body PostPackagePackageIdRecipientRecipientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdRecipientRecipientIdResponse, error)

	// PutPackagePackageIdRecipients request with any body
	PutPackagePackageIdRecipientsWithBodyWithResponse(ctx context.Context, packageId string, params *PutPackagePackageIdRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPackagePackageIdRecipientsResponse, error)

	PutPackagePackageIdRecipientsWithResponse(ctx context.Context, packageId string, params *PutPackagePackageIdRecipientsParams, body PutPackagePackageIdRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPackagePackageIdRecipientsResponse, error)

	// DeletePackagePackageIdTemp request
	DeletePackagePackageIdTempWithResponse(ctx context.Context, packageId string, params *DeletePackagePackageIdTempParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdTempResponse, error)

	// GetPackagePackageIdRecipientIdPublicKeys request
	GetPackagePackageIdRecipientIdPublicKeysWithResponse(ctx context.Context, packageId string, recipientId string, params *GetPackagePackageIdRecipientIdPublicKeysParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdRecipientIdPublicKeysResponse, error)

	// PutPublicKey request with any body
	PutPublicKeyWithBodyWithResponse(ctx context.Context, params *PutPublicKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPublicKeyResponse, error)

	PutPublicKeyWithResponse(ctx context.Context, params *PutPublicKeyParams, body PutPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPublicKeyResponse, error)

	// DeletePublicKeyPublicKeyId request
	DeletePublicKeyPublicKeyIdWithResponse(ctx context.Context, publicKeyId string, params *DeletePublicKeyPublicKeyIdParams, reqEditors ...RequestEditorFn) (*DeletePublicKeyPublicKeyIdResponse, error)

	// GetPublicKeyPublicKeyId request
	GetPublicKeyPublicKeyIdWithResponse(ctx context.Context, publicKeyId string, params *GetPublicKeyPublicKeyIdParams, reqEditors ...RequestEditorFn) (*GetPublicKeyPublicKeyIdResponse, error)

	// GetRecipientHistoryRecipientEmail request
	GetRecipientHistoryRecipientEmailWithResponse(ctx context.Context, recipientEmail string, params *GetRecipientHistoryRecipientEmailParams, reqEditors ...RequestEditorFn) (*GetRecipientHistoryRecipientEmailResponse, error)

	// GetSyncPublicKeyId request
	GetSyncPublicKeyIdWithResponse(ctx context.Context, publicKeyId string, params *GetSyncPublicKeyIdParams, reqEditors ...RequestEditorFn) (*GetSyncPublicKeyIdResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// DeleteUserDropzoneRecipients request
	DeleteUserDropzoneRecipientsWithResponse(ctx context.Context, params *DeleteUserDropzoneRecipientsParams, reqEditors ...RequestEditorFn) (*DeleteUserDropzoneRecipientsResponse, error)

	// GetUserDropzoneRecipients request
	GetUserDropzoneRecipientsWithResponse(ctx context.Context, params *GetUserDropzoneRecipientsParams, reqEditors ...RequestEditorFn) (*GetUserDropzoneRecipientsResponse, error)

	// PutUserDropzoneRecipients request with any body
	PutUserDropzoneRecipientsWithBodyWithResponse(ctx context.Context, params *PutUserDropzoneRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserDropzoneRecipientsResponse, error)

	PutUserDropzoneRecipientsWithResponse(ctx context.Context, params *PutUserDropzoneRecipientsParams, body PutUserDropzoneRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserDropzoneRecipientsResponse, error)

	// GetUserGroups request
	GetUserGroupsWithResponse(ctx context.Context, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*GetUserGroupsResponse, error)

	// PostUserUserIdDropzoneConfig request with any body
	PostUserUserIdDropzoneConfigWithBodyWithResponse(ctx context.Context, userId string, params *PostUserUserIdDropzoneConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdDropzoneConfigResponse, error)

	PostUserUserIdDropzoneConfigWithResponse(ctx context.Context, userId string, params *PostUserUserIdDropzoneConfigParams, body PostUserUserIdDropzoneConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdDropzoneConfigResponse, error)
}

type GetConfigVerifyCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VerifyCredentialsResponse
}

// Status returns HTTPResponse.Status
func (r GetConfigVerifyCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigVerifyCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnterpriseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnterpriseInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetEnterpriseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnterpriseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnterpriseGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnterpriseContactGroupsResponse
}

// Status returns HTTPResponse.Status
func (r GetEnterpriseGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnterpriseGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGetIdentityCookieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetIdentityCookieResponse
}

// Status returns HTTPResponse.Status
func (r GetGetIdentityCookieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGetIdentityCookieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateContactGroupResponse
}

// Status returns HTTPResponse.Status
func (r PutGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteContactGroupResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGroupGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGroupGroupIdUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddContactGroupUserResponse
}

// Status returns HTTPResponse.Status
func (r PutGroupGroupIdUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGroupGroupIdUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupGroupIdUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGroupGroupIdUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupGroupIdUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSentPackagesResponse
}

// Status returns HTTPResponse.Status
func (r GetPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePackageResp
}

// Status returns HTTPResponse.Status
func (r CreatePackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackageArchivedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetArchivedPackagesResponse
}

// Status returns HTTPResponse.Status
func (r GetPackageArchivedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackageArchivedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationPackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetOrganizationPackagesResp
}

// Status returns HTTPResponse.Status
func (r GetOrganizationPackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationPackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackageReceivedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetReceivedPackagesResponse
}

// Status returns HTTPResponse.Status
func (r GetPackageReceivedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackageReceivedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackageWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetWorkspacePackagesResponse
}

// Status returns HTTPResponse.Status
func (r GetPackageWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackageWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePackagePackageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r DeletePackagePackageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePackagePackageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackageInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPackageInformationResp
}

// Status returns HTTPResponse.Status
func (r GetPackageInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackageInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPackagePackageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r PostPackagePackageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPackagePackageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPackagePackageIdActivityLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetActivityLogResponse
}

// Status returns HTTPResponse.Status
func (r PostPackagePackageIdActivityLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPackagePackageIdActivityLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagePackageIdDirectoryDirectoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDirectoryResponse
}

// Status returns HTTPResponse.Status
func (r GetPackagePackageIdDirectoryDirectoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagePackageIdDirectoryDirectoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPackagePackageIdDirectoryDirectoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r PostPackagePackageIdDirectoryDirectoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPackagePackageIdDirectoryDirectoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePackagePackageIdDirectoryDirectoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r DeletePackagePackageIdDirectoryDirectoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePackagePackageIdDirectoryDirectoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileResponse
}

// Status returns HTTPResponse.Status
func (r GetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r DeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MoveWorkspaceFileResponse
}

// Status returns HTTPResponse.Status
func (r PostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDownloadUrlsResponse
}

// Status returns HTTPResponse.Status
func (r PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateDirectoryResponse
}

// Status returns HTTPResponse.Status
func (r PutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateFileResp
}

// Status returns HTTPResponse.Status
func (r CreateFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePackagePackageIdFileFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteFileResponse
}

// Status returns HTTPResponse.Status
func (r DeletePackagePackageIdFileFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePackagePackageIdFileFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagePackageIdFileFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileResponse
}

// Status returns HTTPResponse.Status
func (r GetPackagePackageIdFileFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagePackageIdFileFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPackagePackageIdFileFileIdCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r PostPackagePackageIdFileFileIdCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPackagePackageIdFileFileIdCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPackagePackageIdFileFileIdDownloadUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDownloadUrlsResponse
}

// Status returns HTTPResponse.Status
func (r PostPackagePackageIdFileFileIdDownloadUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPackagePackageIdFileFileIdDownloadUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadCompleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadCompletedResponse
}

// Status returns HTTPResponse.Status
func (r UploadCompleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadCompleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUploadUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUploadUrlsResp
}

// Status returns HTTPResponse.Status
func (r GetUploadUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUploadUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FinalizePackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FinalizePackageResp
}

// Status returns HTTPResponse.Status
func (r FinalizePackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FinalizePackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePackagePackageIdGroupGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r DeletePackagePackageIdGroupGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePackagePackageIdGroupGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPackagePackageIdGroupGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddContactGroupToPackageResponse
}

// Status returns HTTPResponse.Status
func (r PutPackagePackageIdGroupGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPackagePackageIdGroupGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagePackageIdLinkPublicKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddKeyCodeToPackageResponse
}

// Status returns HTTPResponse.Status
func (r GetPackagePackageIdLinkPublicKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagePackageIdLinkPublicKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPackagePackageIdLinkPublicKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r PutPackagePackageIdLinkPublicKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPackagePackageIdLinkPublicKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadEncryptedMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadEncryptedMessageResp
}

// Status returns HTTPResponse.Status
func (r UploadEncryptedMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadEncryptedMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagePackageIdMessageChecksumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPackageMessageResponse
}

// Status returns HTTPResponse.Status
func (r GetPackagePackageIdMessageChecksumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagePackageIdMessageChecksumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagePackageIdPublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPublicKeysResponse
}

// Status returns HTTPResponse.Status
func (r GetPackagePackageIdPublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagePackageIdPublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRecipientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddRecipientResp
}

// Status returns HTTPResponse.Status
func (r AddRecipientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRecipientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePackagePackageIdRecipientRecipientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r DeletePackagePackageIdRecipientRecipientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePackagePackageIdRecipientRecipientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagePackageIdRecipientRecipientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddRecipientResp
}

// Status returns HTTPResponse.Status
func (r GetPackagePackageIdRecipientRecipientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagePackageIdRecipientRecipientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPackagePackageIdRecipientRecipientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddRecipientResp
}

// Status returns HTTPResponse.Status
func (r PostPackagePackageIdRecipientRecipientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPackagePackageIdRecipientRecipientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPackagePackageIdRecipientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddRecipientsToPackageResponse
}

// Status returns HTTPResponse.Status
func (r PutPackagePackageIdRecipientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPackagePackageIdRecipientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePackagePackageIdTempResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r DeletePackagePackageIdTempResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePackagePackageIdTempResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagePackageIdRecipientIdPublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPublicKeysResponse
}

// Status returns HTTPResponse.Status
func (r GetPackagePackageIdRecipientIdPublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagePackageIdRecipientIdPublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddPublicKeyResponse
}

// Status returns HTTPResponse.Status
func (r PutPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePublicKeyPublicKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
}

// Status returns HTTPResponse.Status
func (r DeletePublicKeyPublicKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePublicKeyPublicKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicKeyPublicKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPublicKeyResponse
}

// Status returns HTTPResponse.Status
func (r GetPublicKeyPublicKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicKeyPublicKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipientHistoryRecipientEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRecipientHistoryResponse
}

// Status returns HTTPResponse.Status
func (r GetRecipientHistoryRecipientEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipientHistoryRecipientEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSyncPublicKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SyncKeycodesResponse
}

// Status returns HTTPResponse.Status
func (r GetSyncPublicKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSyncPublicKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUserInformationResponse
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserDropzoneRecipientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteDropzoneRecipientResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserDropzoneRecipientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserDropzoneRecipientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserDropzoneRecipientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDropzoneRecipientsResponse
}

// Status returns HTTPResponse.Status
func (r GetUserDropzoneRecipientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserDropzoneRecipientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserDropzoneRecipientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddDropzoneRecipientsResponse
}

// Status returns HTTPResponse.Status
func (r PutUserDropzoneRecipientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserDropzoneRecipientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUserContactGroupsResponse
}

// Status returns HTTPResponse.Status
func (r GetUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdDropzoneConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateDropzoneConfigResponse
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdDropzoneConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdDropzoneConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetConfigVerifyCredentialsWithResponse request returning *GetConfigVerifyCredentialsResponse
func (c *ClientWithResponses) GetConfigVerifyCredentialsWithResponse(ctx context.Context, params *GetConfigVerifyCredentialsParams, reqEditors ...RequestEditorFn) (*GetConfigVerifyCredentialsResponse, error) {
	rsp, err := c.GetConfigVerifyCredentials(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigVerifyCredentialsResponse(rsp)
}

// GetEnterpriseWithResponse request returning *GetEnterpriseResponse
func (c *ClientWithResponses) GetEnterpriseWithResponse(ctx context.Context, params *GetEnterpriseParams, reqEditors ...RequestEditorFn) (*GetEnterpriseResponse, error) {
	rsp, err := c.GetEnterprise(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnterpriseResponse(rsp)
}

// GetEnterpriseGroupsWithResponse request returning *GetEnterpriseGroupsResponse
func (c *ClientWithResponses) GetEnterpriseGroupsWithResponse(ctx context.Context, params *GetEnterpriseGroupsParams, reqEditors ...RequestEditorFn) (*GetEnterpriseGroupsResponse, error) {
	rsp, err := c.GetEnterpriseGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnterpriseGroupsResponse(rsp)
}

// GetGetIdentityCookieWithResponse request returning *GetGetIdentityCookieResponse
func (c *ClientWithResponses) GetGetIdentityCookieWithResponse(ctx context.Context, params *GetGetIdentityCookieParams, reqEditors ...RequestEditorFn) (*GetGetIdentityCookieResponse, error) {
	rsp, err := c.GetGetIdentityCookie(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGetIdentityCookieResponse(rsp)
}

// PutGroupWithBodyWithResponse request with arbitrary body returning *PutGroupResponse
func (c *ClientWithResponses) PutGroupWithBodyWithResponse(ctx context.Context, params *PutGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupResponse, error) {
	rsp, err := c.PutGroupWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupResponse(rsp)
}

func (c *ClientWithResponses) PutGroupWithResponse(ctx context.Context, params *PutGroupParams, body PutGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupResponse, error) {
	rsp, err := c.PutGroup(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupResponse(rsp)
}

// DeleteGroupGroupIdWithResponse request returning *DeleteGroupGroupIdResponse
func (c *ClientWithResponses) DeleteGroupGroupIdWithResponse(ctx context.Context, groupId string, params *DeleteGroupGroupIdParams, reqEditors ...RequestEditorFn) (*DeleteGroupGroupIdResponse, error) {
	rsp, err := c.DeleteGroupGroupId(ctx, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupGroupIdResponse(rsp)
}

// PutGroupGroupIdUserWithBodyWithResponse request with arbitrary body returning *PutGroupGroupIdUserResponse
func (c *ClientWithResponses) PutGroupGroupIdUserWithBodyWithResponse(ctx context.Context, groupId string, params *PutGroupGroupIdUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupGroupIdUserResponse, error) {
	rsp, err := c.PutGroupGroupIdUserWithBody(ctx, groupId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupGroupIdUserResponse(rsp)
}

func (c *ClientWithResponses) PutGroupGroupIdUserWithResponse(ctx context.Context, groupId string, params *PutGroupGroupIdUserParams, body PutGroupGroupIdUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupGroupIdUserResponse, error) {
	rsp, err := c.PutGroupGroupIdUser(ctx, groupId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupGroupIdUserResponse(rsp)
}

// DeleteGroupGroupIdUserIdWithResponse request returning *DeleteGroupGroupIdUserIdResponse
func (c *ClientWithResponses) DeleteGroupGroupIdUserIdWithResponse(ctx context.Context, groupId string, userId string, params *DeleteGroupGroupIdUserIdParams, reqEditors ...RequestEditorFn) (*DeleteGroupGroupIdUserIdResponse, error) {
	rsp, err := c.DeleteGroupGroupIdUserId(ctx, groupId, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupGroupIdUserIdResponse(rsp)
}

// GetPackageWithResponse request returning *GetPackageResponse
func (c *ClientWithResponses) GetPackageWithResponse(ctx context.Context, params *GetPackageParams, reqEditors ...RequestEditorFn) (*GetPackageResponse, error) {
	rsp, err := c.GetPackage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackageResponse(rsp)
}

// CreatePackageWithBodyWithResponse request with arbitrary body returning *CreatePackageResponse
func (c *ClientWithResponses) CreatePackageWithBodyWithResponse(ctx context.Context, params *CreatePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePackageResponse, error) {
	rsp, err := c.CreatePackageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePackageResponse(rsp)
}

func (c *ClientWithResponses) CreatePackageWithResponse(ctx context.Context, params *CreatePackageParams, body CreatePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePackageResponse, error) {
	rsp, err := c.CreatePackage(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePackageResponse(rsp)
}

// GetPackageArchivedWithResponse request returning *GetPackageArchivedResponse
func (c *ClientWithResponses) GetPackageArchivedWithResponse(ctx context.Context, params *GetPackageArchivedParams, reqEditors ...RequestEditorFn) (*GetPackageArchivedResponse, error) {
	rsp, err := c.GetPackageArchived(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackageArchivedResponse(rsp)
}

// GetOrganizationPackagesWithBodyWithResponse request with arbitrary body returning *GetOrganizationPackagesResponse
func (c *ClientWithResponses) GetOrganizationPackagesWithBodyWithResponse(ctx context.Context, params *GetOrganizationPackagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrganizationPackagesResponse, error) {
	rsp, err := c.GetOrganizationPackagesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationPackagesResponse(rsp)
}

func (c *ClientWithResponses) GetOrganizationPackagesWithResponse(ctx context.Context, params *GetOrganizationPackagesParams, body GetOrganizationPackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOrganizationPackagesResponse, error) {
	rsp, err := c.GetOrganizationPackages(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationPackagesResponse(rsp)
}

// GetPackageReceivedWithResponse request returning *GetPackageReceivedResponse
func (c *ClientWithResponses) GetPackageReceivedWithResponse(ctx context.Context, params *GetPackageReceivedParams, reqEditors ...RequestEditorFn) (*GetPackageReceivedResponse, error) {
	rsp, err := c.GetPackageReceived(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackageReceivedResponse(rsp)
}

// GetPackageWorkspacesWithResponse request returning *GetPackageWorkspacesResponse
func (c *ClientWithResponses) GetPackageWorkspacesWithResponse(ctx context.Context, params *GetPackageWorkspacesParams, reqEditors ...RequestEditorFn) (*GetPackageWorkspacesResponse, error) {
	rsp, err := c.GetPackageWorkspaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackageWorkspacesResponse(rsp)
}

// DeletePackagePackageIdWithResponse request returning *DeletePackagePackageIdResponse
func (c *ClientWithResponses) DeletePackagePackageIdWithResponse(ctx context.Context, packageId string, params *DeletePackagePackageIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdResponse, error) {
	rsp, err := c.DeletePackagePackageId(ctx, packageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePackagePackageIdResponse(rsp)
}

// GetPackageInformationWithResponse request returning *GetPackageInformationResponse
func (c *ClientWithResponses) GetPackageInformationWithResponse(ctx context.Context, packageId string, params *GetPackageInformationParams, reqEditors ...RequestEditorFn) (*GetPackageInformationResponse, error) {
	rsp, err := c.GetPackageInformation(ctx, packageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackageInformationResponse(rsp)
}

// PostPackagePackageIdWithBodyWithResponse request with arbitrary body returning *PostPackagePackageIdResponse
func (c *ClientWithResponses) PostPackagePackageIdWithBodyWithResponse(ctx context.Context, packageId string, params *PostPackagePackageIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdResponse, error) {
	rsp, err := c.PostPackagePackageIdWithBody(ctx, packageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdResponse(rsp)
}

func (c *ClientWithResponses) PostPackagePackageIdWithResponse(ctx context.Context, packageId string, params *PostPackagePackageIdParams, body PostPackagePackageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdResponse, error) {
	rsp, err := c.PostPackagePackageId(ctx, packageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdResponse(rsp)
}

// PostPackagePackageIdActivityLogWithResponse request returning *PostPackagePackageIdActivityLogResponse
func (c *ClientWithResponses) PostPackagePackageIdActivityLogWithResponse(ctx context.Context, packageId string, params *PostPackagePackageIdActivityLogParams, reqEditors ...RequestEditorFn) (*PostPackagePackageIdActivityLogResponse, error) {
	rsp, err := c.PostPackagePackageIdActivityLog(ctx, packageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdActivityLogResponse(rsp)
}

// GetPackagePackageIdDirectoryDirectoryIdWithResponse request returning *GetPackagePackageIdDirectoryDirectoryIdResponse
func (c *ClientWithResponses) GetPackagePackageIdDirectoryDirectoryIdWithResponse(ctx context.Context, packageId string, directoryId string, params *GetPackagePackageIdDirectoryDirectoryIdParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdDirectoryDirectoryIdResponse, error) {
	rsp, err := c.GetPackagePackageIdDirectoryDirectoryId(ctx, packageId, directoryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagePackageIdDirectoryDirectoryIdResponse(rsp)
}

// PostPackagePackageIdDirectoryDirectoryIdWithBodyWithResponse request with arbitrary body returning *PostPackagePackageIdDirectoryDirectoryIdResponse
func (c *ClientWithResponses) PostPackagePackageIdDirectoryDirectoryIdWithBodyWithResponse(ctx context.Context, packageId string, directoryId string, params *PostPackagePackageIdDirectoryDirectoryIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdDirectoryDirectoryIdResponse, error) {
	rsp, err := c.PostPackagePackageIdDirectoryDirectoryIdWithBody(ctx, packageId, directoryId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdDirectoryDirectoryIdResponse(rsp)
}

func (c *ClientWithResponses) PostPackagePackageIdDirectoryDirectoryIdWithResponse(ctx context.Context, packageId string, directoryId string, params *PostPackagePackageIdDirectoryDirectoryIdParams, body PostPackagePackageIdDirectoryDirectoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdDirectoryDirectoryIdResponse, error) {
	rsp, err := c.PostPackagePackageIdDirectoryDirectoryId(ctx, packageId, directoryId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdDirectoryDirectoryIdResponse(rsp)
}

// DeletePackagePackageIdDirectoryDirectoryIdWithResponse request returning *DeletePackagePackageIdDirectoryDirectoryIdResponse
func (c *ClientWithResponses) DeletePackagePackageIdDirectoryDirectoryIdWithResponse(ctx context.Context, packageId string, directoryId string, params *DeletePackagePackageIdDirectoryDirectoryIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdDirectoryDirectoryIdResponse, error) {
	rsp, err := c.DeletePackagePackageIdDirectoryDirectoryId(ctx, packageId, directoryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePackagePackageIdDirectoryDirectoryIdResponse(rsp)
}

// GetPackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse request returning *GetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse
func (c *ClientWithResponses) GetPackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse(ctx context.Context, packageId string, directoryId string, fileId string, params *GetPackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse, error) {
	rsp, err := c.GetPackagePackageIdDirectoryDirectoryIdFileFileId(ctx, packageId, directoryId, fileId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse(rsp)
}

// DeletePackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse request returning *DeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse
func (c *ClientWithResponses) DeletePackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse(ctx context.Context, packageId string, directoryId string, fileId string, params *DeletePackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse, error) {
	rsp, err := c.DeletePackagePackageIdDirectoryDirectoryIdFileFileId(ctx, packageId, directoryId, fileId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse(rsp)
}

// PostPackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse request returning *PostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse
func (c *ClientWithResponses) PostPackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdParams, reqEditors ...RequestEditorFn) (*PostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse, error) {
	rsp, err := c.PostPackagePackageIdDirectoryDirectoryIdFileFileId(ctx, packageId, directoryId, fileId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse(rsp)
}

// PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsWithBodyWithResponse request with arbitrary body returning *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse
func (c *ClientWithResponses) PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsWithBodyWithResponse(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse, error) {
	rsp, err := c.PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsWithBody(ctx, packageId, directoryId, fileId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse(rsp)
}

func (c *ClientWithResponses) PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsWithResponse(ctx context.Context, packageId string, directoryId string, fileId string, params *PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsParams, body PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse, error) {
	rsp, err := c.PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrls(ctx, packageId, directoryId, fileId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse(rsp)
}

// PutPackagePackageIdDirectoryDirectoryIdSubdirectoryWithBodyWithResponse request with arbitrary body returning *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse
func (c *ClientWithResponses) PutPackagePackageIdDirectoryDirectoryIdSubdirectoryWithBodyWithResponse(ctx context.Context, packageId string, directoryId string, params *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse, error) {
	rsp, err := c.PutPackagePackageIdDirectoryDirectoryIdSubdirectoryWithBody(ctx, packageId, directoryId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse(rsp)
}

func (c *ClientWithResponses) PutPackagePackageIdDirectoryDirectoryIdSubdirectoryWithResponse(ctx context.Context, packageId string, directoryId string, params *PutPackagePackageIdDirectoryDirectoryIdSubdirectoryParams, body PutPackagePackageIdDirectoryDirectoryIdSubdirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse, error) {
	rsp, err := c.PutPackagePackageIdDirectoryDirectoryIdSubdirectory(ctx, packageId, directoryId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse(rsp)
}

// CreateFileWithBodyWithResponse request with arbitrary body returning *CreateFileResponse
func (c *ClientWithResponses) CreateFileWithBodyWithResponse(ctx context.Context, packageId string, params *CreateFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFileResponse, error) {
	rsp, err := c.CreateFileWithBody(ctx, packageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFileResponse(rsp)
}

func (c *ClientWithResponses) CreateFileWithResponse(ctx context.Context, packageId string, params *CreateFileParams, body CreateFileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFileResponse, error) {
	rsp, err := c.CreateFile(ctx, packageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFileResponse(rsp)
}

// DeletePackagePackageIdFileFileIdWithResponse request returning *DeletePackagePackageIdFileFileIdResponse
func (c *ClientWithResponses) DeletePackagePackageIdFileFileIdWithResponse(ctx context.Context, packageId string, fileId string, params *DeletePackagePackageIdFileFileIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdFileFileIdResponse, error) {
	rsp, err := c.DeletePackagePackageIdFileFileId(ctx, packageId, fileId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePackagePackageIdFileFileIdResponse(rsp)
}

// GetPackagePackageIdFileFileIdWithResponse request returning *GetPackagePackageIdFileFileIdResponse
func (c *ClientWithResponses) GetPackagePackageIdFileFileIdWithResponse(ctx context.Context, packageId string, fileId string, params *GetPackagePackageIdFileFileIdParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdFileFileIdResponse, error) {
	rsp, err := c.GetPackagePackageIdFileFileId(ctx, packageId, fileId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagePackageIdFileFileIdResponse(rsp)
}

// PostPackagePackageIdFileFileIdCopyWithBodyWithResponse request with arbitrary body returning *PostPackagePackageIdFileFileIdCopyResponse
func (c *ClientWithResponses) PostPackagePackageIdFileFileIdCopyWithBodyWithResponse(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdCopyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdFileFileIdCopyResponse, error) {
	rsp, err := c.PostPackagePackageIdFileFileIdCopyWithBody(ctx, packageId, fileId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdFileFileIdCopyResponse(rsp)
}

func (c *ClientWithResponses) PostPackagePackageIdFileFileIdCopyWithResponse(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdCopyParams, body PostPackagePackageIdFileFileIdCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdFileFileIdCopyResponse, error) {
	rsp, err := c.PostPackagePackageIdFileFileIdCopy(ctx, packageId, fileId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdFileFileIdCopyResponse(rsp)
}

// PostPackagePackageIdFileFileIdDownloadUrlsWithBodyWithResponse request with arbitrary body returning *PostPackagePackageIdFileFileIdDownloadUrlsResponse
func (c *ClientWithResponses) PostPackagePackageIdFileFileIdDownloadUrlsWithBodyWithResponse(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdDownloadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdFileFileIdDownloadUrlsResponse, error) {
	rsp, err := c.PostPackagePackageIdFileFileIdDownloadUrlsWithBody(ctx, packageId, fileId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdFileFileIdDownloadUrlsResponse(rsp)
}

func (c *ClientWithResponses) PostPackagePackageIdFileFileIdDownloadUrlsWithResponse(ctx context.Context, packageId string, fileId string, params *PostPackagePackageIdFileFileIdDownloadUrlsParams, body PostPackagePackageIdFileFileIdDownloadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdFileFileIdDownloadUrlsResponse, error) {
	rsp, err := c.PostPackagePackageIdFileFileIdDownloadUrls(ctx, packageId, fileId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdFileFileIdDownloadUrlsResponse(rsp)
}

// UploadCompleteWithBodyWithResponse request with arbitrary body returning *UploadCompleteResponse
func (c *ClientWithResponses) UploadCompleteWithBodyWithResponse(ctx context.Context, packageId string, fileId string, params *UploadCompleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadCompleteResponse, error) {
	rsp, err := c.UploadCompleteWithBody(ctx, packageId, fileId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadCompleteResponse(rsp)
}

func (c *ClientWithResponses) UploadCompleteWithResponse(ctx context.Context, packageId string, fileId string, params *UploadCompleteParams, body UploadCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadCompleteResponse, error) {
	rsp, err := c.UploadComplete(ctx, packageId, fileId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadCompleteResponse(rsp)
}

// GetUploadUrlsWithBodyWithResponse request with arbitrary body returning *GetUploadUrlsResponse
func (c *ClientWithResponses) GetUploadUrlsWithBodyWithResponse(ctx context.Context, packageId string, fileId string, params *GetUploadUrlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUploadUrlsResponse, error) {
	rsp, err := c.GetUploadUrlsWithBody(ctx, packageId, fileId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUploadUrlsResponse(rsp)
}

func (c *ClientWithResponses) GetUploadUrlsWithResponse(ctx context.Context, packageId string, fileId string, params *GetUploadUrlsParams, body GetUploadUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUploadUrlsResponse, error) {
	rsp, err := c.GetUploadUrls(ctx, packageId, fileId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUploadUrlsResponse(rsp)
}

// FinalizePackageWithBodyWithResponse request with arbitrary body returning *FinalizePackageResponse
func (c *ClientWithResponses) FinalizePackageWithBodyWithResponse(ctx context.Context, packageId string, params *FinalizePackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinalizePackageResponse, error) {
	rsp, err := c.FinalizePackageWithBody(ctx, packageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinalizePackageResponse(rsp)
}

func (c *ClientWithResponses) FinalizePackageWithResponse(ctx context.Context, packageId string, params *FinalizePackageParams, body FinalizePackageJSONRequestBody, reqEditors ...RequestEditorFn) (*FinalizePackageResponse, error) {
	rsp, err := c.FinalizePackage(ctx, packageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinalizePackageResponse(rsp)
}

// DeletePackagePackageIdGroupGroupIdWithResponse request returning *DeletePackagePackageIdGroupGroupIdResponse
func (c *ClientWithResponses) DeletePackagePackageIdGroupGroupIdWithResponse(ctx context.Context, packageId string, groupId string, params *DeletePackagePackageIdGroupGroupIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdGroupGroupIdResponse, error) {
	rsp, err := c.DeletePackagePackageIdGroupGroupId(ctx, packageId, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePackagePackageIdGroupGroupIdResponse(rsp)
}

// PutPackagePackageIdGroupGroupIdWithResponse request returning *PutPackagePackageIdGroupGroupIdResponse
func (c *ClientWithResponses) PutPackagePackageIdGroupGroupIdWithResponse(ctx context.Context, packageId string, groupId string, params *PutPackagePackageIdGroupGroupIdParams, reqEditors ...RequestEditorFn) (*PutPackagePackageIdGroupGroupIdResponse, error) {
	rsp, err := c.PutPackagePackageIdGroupGroupId(ctx, packageId, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPackagePackageIdGroupGroupIdResponse(rsp)
}

// GetPackagePackageIdLinkPublicKeyIdWithResponse request returning *GetPackagePackageIdLinkPublicKeyIdResponse
func (c *ClientWithResponses) GetPackagePackageIdLinkPublicKeyIdWithResponse(ctx context.Context, packageId string, publicKeyId string, params *GetPackagePackageIdLinkPublicKeyIdParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdLinkPublicKeyIdResponse, error) {
	rsp, err := c.GetPackagePackageIdLinkPublicKeyId(ctx, packageId, publicKeyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagePackageIdLinkPublicKeyIdResponse(rsp)
}

// PutPackagePackageIdLinkPublicKeyIdWithResponse request returning *PutPackagePackageIdLinkPublicKeyIdResponse
func (c *ClientWithResponses) PutPackagePackageIdLinkPublicKeyIdWithResponse(ctx context.Context, packageId string, publicKeyId string, params *PutPackagePackageIdLinkPublicKeyIdParams, reqEditors ...RequestEditorFn) (*PutPackagePackageIdLinkPublicKeyIdResponse, error) {
	rsp, err := c.PutPackagePackageIdLinkPublicKeyId(ctx, packageId, publicKeyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPackagePackageIdLinkPublicKeyIdResponse(rsp)
}

// UploadEncryptedMessageWithBodyWithResponse request with arbitrary body returning *UploadEncryptedMessageResponse
func (c *ClientWithResponses) UploadEncryptedMessageWithBodyWithResponse(ctx context.Context, packageId string, params *UploadEncryptedMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadEncryptedMessageResponse, error) {
	rsp, err := c.UploadEncryptedMessageWithBody(ctx, packageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadEncryptedMessageResponse(rsp)
}

func (c *ClientWithResponses) UploadEncryptedMessageWithResponse(ctx context.Context, packageId string, params *UploadEncryptedMessageParams, body UploadEncryptedMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadEncryptedMessageResponse, error) {
	rsp, err := c.UploadEncryptedMessage(ctx, packageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadEncryptedMessageResponse(rsp)
}

// GetPackagePackageIdMessageChecksumWithResponse request returning *GetPackagePackageIdMessageChecksumResponse
func (c *ClientWithResponses) GetPackagePackageIdMessageChecksumWithResponse(ctx context.Context, packageId string, checksum string, params *GetPackagePackageIdMessageChecksumParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdMessageChecksumResponse, error) {
	rsp, err := c.GetPackagePackageIdMessageChecksum(ctx, packageId, checksum, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagePackageIdMessageChecksumResponse(rsp)
}

// PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdWithResponse request returning *PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse
func (c *ClientWithResponses) PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdWithResponse(ctx context.Context, packageId string, sourcedirectoryId string, targetdirectoryId string, params *PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdParams, reqEditors ...RequestEditorFn) (*PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse, error) {
	rsp, err := c.PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryId(ctx, packageId, sourcedirectoryId, targetdirectoryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse(rsp)
}

// GetPackagePackageIdPublicKeysWithResponse request returning *GetPackagePackageIdPublicKeysResponse
func (c *ClientWithResponses) GetPackagePackageIdPublicKeysWithResponse(ctx context.Context, packageId string, params *GetPackagePackageIdPublicKeysParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdPublicKeysResponse, error) {
	rsp, err := c.GetPackagePackageIdPublicKeys(ctx, packageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagePackageIdPublicKeysResponse(rsp)
}

// AddRecipientWithBodyWithResponse request with arbitrary body returning *AddRecipientResponse
func (c *ClientWithResponses) AddRecipientWithBodyWithResponse(ctx context.Context, packageId string, params *AddRecipientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRecipientResponse, error) {
	rsp, err := c.AddRecipientWithBody(ctx, packageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRecipientResponse(rsp)
}

func (c *ClientWithResponses) AddRecipientWithResponse(ctx context.Context, packageId string, params *AddRecipientParams, body AddRecipientJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRecipientResponse, error) {
	rsp, err := c.AddRecipient(ctx, packageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRecipientResponse(rsp)
}

// DeletePackagePackageIdRecipientRecipientIdWithResponse request returning *DeletePackagePackageIdRecipientRecipientIdResponse
func (c *ClientWithResponses) DeletePackagePackageIdRecipientRecipientIdWithResponse(ctx context.Context, packageId string, recipientId string, params *DeletePackagePackageIdRecipientRecipientIdParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdRecipientRecipientIdResponse, error) {
	rsp, err := c.DeletePackagePackageIdRecipientRecipientId(ctx, packageId, recipientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePackagePackageIdRecipientRecipientIdResponse(rsp)
}

// GetPackagePackageIdRecipientRecipientIdWithResponse request returning *GetPackagePackageIdRecipientRecipientIdResponse
func (c *ClientWithResponses) GetPackagePackageIdRecipientRecipientIdWithResponse(ctx context.Context, packageId string, recipientId string, params *GetPackagePackageIdRecipientRecipientIdParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdRecipientRecipientIdResponse, error) {
	rsp, err := c.GetPackagePackageIdRecipientRecipientId(ctx, packageId, recipientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagePackageIdRecipientRecipientIdResponse(rsp)
}

// PostPackagePackageIdRecipientRecipientIdWithBodyWithResponse request with arbitrary body returning *PostPackagePackageIdRecipientRecipientIdResponse
func (c *ClientWithResponses) PostPackagePackageIdRecipientRecipientIdWithBodyWithResponse(ctx context.Context, packageId string, recipientId string, params *PostPackagePackageIdRecipientRecipientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPackagePackageIdRecipientRecipientIdResponse, error) {
	rsp, err := c.PostPackagePackageIdRecipientRecipientIdWithBody(ctx, packageId, recipientId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdRecipientRecipientIdResponse(rsp)
}

func (c *ClientWithResponses) PostPackagePackageIdRecipientRecipientIdWithResponse(ctx context.Context, packageId string, recipientId string, params *PostPackagePackageIdRecipientRecipientIdParams, body PostPackagePackageIdRecipientRecipientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPackagePackageIdRecipientRecipientIdResponse, error) {
	rsp, err := c.PostPackagePackageIdRecipientRecipientId(ctx, packageId, recipientId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPackagePackageIdRecipientRecipientIdResponse(rsp)
}

// PutPackagePackageIdRecipientsWithBodyWithResponse request with arbitrary body returning *PutPackagePackageIdRecipientsResponse
func (c *ClientWithResponses) PutPackagePackageIdRecipientsWithBodyWithResponse(ctx context.Context, packageId string, params *PutPackagePackageIdRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPackagePackageIdRecipientsResponse, error) {
	rsp, err := c.PutPackagePackageIdRecipientsWithBody(ctx, packageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPackagePackageIdRecipientsResponse(rsp)
}

func (c *ClientWithResponses) PutPackagePackageIdRecipientsWithResponse(ctx context.Context, packageId string, params *PutPackagePackageIdRecipientsParams, body PutPackagePackageIdRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPackagePackageIdRecipientsResponse, error) {
	rsp, err := c.PutPackagePackageIdRecipients(ctx, packageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPackagePackageIdRecipientsResponse(rsp)
}

// DeletePackagePackageIdTempWithResponse request returning *DeletePackagePackageIdTempResponse
func (c *ClientWithResponses) DeletePackagePackageIdTempWithResponse(ctx context.Context, packageId string, params *DeletePackagePackageIdTempParams, reqEditors ...RequestEditorFn) (*DeletePackagePackageIdTempResponse, error) {
	rsp, err := c.DeletePackagePackageIdTemp(ctx, packageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePackagePackageIdTempResponse(rsp)
}

// GetPackagePackageIdRecipientIdPublicKeysWithResponse request returning *GetPackagePackageIdRecipientIdPublicKeysResponse
func (c *ClientWithResponses) GetPackagePackageIdRecipientIdPublicKeysWithResponse(ctx context.Context, packageId string, recipientId string, params *GetPackagePackageIdRecipientIdPublicKeysParams, reqEditors ...RequestEditorFn) (*GetPackagePackageIdRecipientIdPublicKeysResponse, error) {
	rsp, err := c.GetPackagePackageIdRecipientIdPublicKeys(ctx, packageId, recipientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagePackageIdRecipientIdPublicKeysResponse(rsp)
}

// PutPublicKeyWithBodyWithResponse request with arbitrary body returning *PutPublicKeyResponse
func (c *ClientWithResponses) PutPublicKeyWithBodyWithResponse(ctx context.Context, params *PutPublicKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPublicKeyResponse, error) {
	rsp, err := c.PutPublicKeyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicKeyResponse(rsp)
}

func (c *ClientWithResponses) PutPublicKeyWithResponse(ctx context.Context, params *PutPublicKeyParams, body PutPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPublicKeyResponse, error) {
	rsp, err := c.PutPublicKey(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicKeyResponse(rsp)
}

// DeletePublicKeyPublicKeyIdWithResponse request returning *DeletePublicKeyPublicKeyIdResponse
func (c *ClientWithResponses) DeletePublicKeyPublicKeyIdWithResponse(ctx context.Context, publicKeyId string, params *DeletePublicKeyPublicKeyIdParams, reqEditors ...RequestEditorFn) (*DeletePublicKeyPublicKeyIdResponse, error) {
	rsp, err := c.DeletePublicKeyPublicKeyId(ctx, publicKeyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePublicKeyPublicKeyIdResponse(rsp)
}

// GetPublicKeyPublicKeyIdWithResponse request returning *GetPublicKeyPublicKeyIdResponse
func (c *ClientWithResponses) GetPublicKeyPublicKeyIdWithResponse(ctx context.Context, publicKeyId string, params *GetPublicKeyPublicKeyIdParams, reqEditors ...RequestEditorFn) (*GetPublicKeyPublicKeyIdResponse, error) {
	rsp, err := c.GetPublicKeyPublicKeyId(ctx, publicKeyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicKeyPublicKeyIdResponse(rsp)
}

// GetRecipientHistoryRecipientEmailWithResponse request returning *GetRecipientHistoryRecipientEmailResponse
func (c *ClientWithResponses) GetRecipientHistoryRecipientEmailWithResponse(ctx context.Context, recipientEmail string, params *GetRecipientHistoryRecipientEmailParams, reqEditors ...RequestEditorFn) (*GetRecipientHistoryRecipientEmailResponse, error) {
	rsp, err := c.GetRecipientHistoryRecipientEmail(ctx, recipientEmail, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipientHistoryRecipientEmailResponse(rsp)
}

// GetSyncPublicKeyIdWithResponse request returning *GetSyncPublicKeyIdResponse
func (c *ClientWithResponses) GetSyncPublicKeyIdWithResponse(ctx context.Context, publicKeyId string, params *GetSyncPublicKeyIdParams, reqEditors ...RequestEditorFn) (*GetSyncPublicKeyIdResponse, error) {
	rsp, err := c.GetSyncPublicKeyId(ctx, publicKeyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSyncPublicKeyIdResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// DeleteUserDropzoneRecipientsWithResponse request returning *DeleteUserDropzoneRecipientsResponse
func (c *ClientWithResponses) DeleteUserDropzoneRecipientsWithResponse(ctx context.Context, params *DeleteUserDropzoneRecipientsParams, reqEditors ...RequestEditorFn) (*DeleteUserDropzoneRecipientsResponse, error) {
	rsp, err := c.DeleteUserDropzoneRecipients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserDropzoneRecipientsResponse(rsp)
}

// GetUserDropzoneRecipientsWithResponse request returning *GetUserDropzoneRecipientsResponse
func (c *ClientWithResponses) GetUserDropzoneRecipientsWithResponse(ctx context.Context, params *GetUserDropzoneRecipientsParams, reqEditors ...RequestEditorFn) (*GetUserDropzoneRecipientsResponse, error) {
	rsp, err := c.GetUserDropzoneRecipients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserDropzoneRecipientsResponse(rsp)
}

// PutUserDropzoneRecipientsWithBodyWithResponse request with arbitrary body returning *PutUserDropzoneRecipientsResponse
func (c *ClientWithResponses) PutUserDropzoneRecipientsWithBodyWithResponse(ctx context.Context, params *PutUserDropzoneRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserDropzoneRecipientsResponse, error) {
	rsp, err := c.PutUserDropzoneRecipientsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserDropzoneRecipientsResponse(rsp)
}

func (c *ClientWithResponses) PutUserDropzoneRecipientsWithResponse(ctx context.Context, params *PutUserDropzoneRecipientsParams, body PutUserDropzoneRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserDropzoneRecipientsResponse, error) {
	rsp, err := c.PutUserDropzoneRecipients(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserDropzoneRecipientsResponse(rsp)
}

// GetUserGroupsWithResponse request returning *GetUserGroupsResponse
func (c *ClientWithResponses) GetUserGroupsWithResponse(ctx context.Context, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*GetUserGroupsResponse, error) {
	rsp, err := c.GetUserGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupsResponse(rsp)
}

// PostUserUserIdDropzoneConfigWithBodyWithResponse request with arbitrary body returning *PostUserUserIdDropzoneConfigResponse
func (c *ClientWithResponses) PostUserUserIdDropzoneConfigWithBodyWithResponse(ctx context.Context, userId string, params *PostUserUserIdDropzoneConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdDropzoneConfigResponse, error) {
	rsp, err := c.PostUserUserIdDropzoneConfigWithBody(ctx, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdDropzoneConfigResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdDropzoneConfigWithResponse(ctx context.Context, userId string, params *PostUserUserIdDropzoneConfigParams, body PostUserUserIdDropzoneConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdDropzoneConfigResponse, error) {
	rsp, err := c.PostUserUserIdDropzoneConfig(ctx, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdDropzoneConfigResponse(rsp)
}

// ParseGetConfigVerifyCredentialsResponse parses an HTTP response from a GetConfigVerifyCredentialsWithResponse call
func ParseGetConfigVerifyCredentialsResponse(rsp *http.Response) (*GetConfigVerifyCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigVerifyCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VerifyCredentialsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnterpriseResponse parses an HTTP response from a GetEnterpriseWithResponse call
func ParseGetEnterpriseResponse(rsp *http.Response) (*GetEnterpriseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnterpriseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnterpriseInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnterpriseGroupsResponse parses an HTTP response from a GetEnterpriseGroupsWithResponse call
func ParseGetEnterpriseGroupsResponse(rsp *http.Response) (*GetEnterpriseGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnterpriseGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnterpriseContactGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGetIdentityCookieResponse parses an HTTP response from a GetGetIdentityCookieWithResponse call
func ParseGetGetIdentityCookieResponse(rsp *http.Response) (*GetGetIdentityCookieResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGetIdentityCookieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetIdentityCookieResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutGroupResponse parses an HTTP response from a PutGroupWithResponse call
func ParsePutGroupResponse(rsp *http.Response) (*PutGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateContactGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteGroupGroupIdResponse parses an HTTP response from a DeleteGroupGroupIdWithResponse call
func ParseDeleteGroupGroupIdResponse(rsp *http.Response) (*DeleteGroupGroupIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteContactGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutGroupGroupIdUserResponse parses an HTTP response from a PutGroupGroupIdUserWithResponse call
func ParsePutGroupGroupIdUserResponse(rsp *http.Response) (*PutGroupGroupIdUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGroupGroupIdUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddContactGroupUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteGroupGroupIdUserIdResponse parses an HTTP response from a DeleteGroupGroupIdUserIdWithResponse call
func ParseDeleteGroupGroupIdUserIdResponse(rsp *http.Response) (*DeleteGroupGroupIdUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupGroupIdUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackageResponse parses an HTTP response from a GetPackageWithResponse call
func ParseGetPackageResponse(rsp *http.Response) (*GetPackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSentPackagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePackageResponse parses an HTTP response from a CreatePackageWithResponse call
func ParseCreatePackageResponse(rsp *http.Response) (*CreatePackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePackageResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackageArchivedResponse parses an HTTP response from a GetPackageArchivedWithResponse call
func ParseGetPackageArchivedResponse(rsp *http.Response) (*GetPackageArchivedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackageArchivedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetArchivedPackagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationPackagesResponse parses an HTTP response from a GetOrganizationPackagesWithResponse call
func ParseGetOrganizationPackagesResponse(rsp *http.Response) (*GetOrganizationPackagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationPackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetOrganizationPackagesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackageReceivedResponse parses an HTTP response from a GetPackageReceivedWithResponse call
func ParseGetPackageReceivedResponse(rsp *http.Response) (*GetPackageReceivedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackageReceivedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetReceivedPackagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackageWorkspacesResponse parses an HTTP response from a GetPackageWorkspacesWithResponse call
func ParseGetPackageWorkspacesResponse(rsp *http.Response) (*GetPackageWorkspacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackageWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetWorkspacePackagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePackagePackageIdResponse parses an HTTP response from a DeletePackagePackageIdWithResponse call
func ParseDeletePackagePackageIdResponse(rsp *http.Response) (*DeletePackagePackageIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePackagePackageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackageInformationResponse parses an HTTP response from a GetPackageInformationWithResponse call
func ParseGetPackageInformationResponse(rsp *http.Response) (*GetPackageInformationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackageInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPackageInformationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPackagePackageIdResponse parses an HTTP response from a PostPackagePackageIdWithResponse call
func ParsePostPackagePackageIdResponse(rsp *http.Response) (*PostPackagePackageIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPackagePackageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPackagePackageIdActivityLogResponse parses an HTTP response from a PostPackagePackageIdActivityLogWithResponse call
func ParsePostPackagePackageIdActivityLogResponse(rsp *http.Response) (*PostPackagePackageIdActivityLogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPackagePackageIdActivityLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetActivityLogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackagePackageIdDirectoryDirectoryIdResponse parses an HTTP response from a GetPackagePackageIdDirectoryDirectoryIdWithResponse call
func ParseGetPackagePackageIdDirectoryDirectoryIdResponse(rsp *http.Response) (*GetPackagePackageIdDirectoryDirectoryIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagePackageIdDirectoryDirectoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDirectoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPackagePackageIdDirectoryDirectoryIdResponse parses an HTTP response from a PostPackagePackageIdDirectoryDirectoryIdWithResponse call
func ParsePostPackagePackageIdDirectoryDirectoryIdResponse(rsp *http.Response) (*PostPackagePackageIdDirectoryDirectoryIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPackagePackageIdDirectoryDirectoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePackagePackageIdDirectoryDirectoryIdResponse parses an HTTP response from a DeletePackagePackageIdDirectoryDirectoryIdWithResponse call
func ParseDeletePackagePackageIdDirectoryDirectoryIdResponse(rsp *http.Response) (*DeletePackagePackageIdDirectoryDirectoryIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePackagePackageIdDirectoryDirectoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse parses an HTTP response from a GetPackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse call
func ParseGetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse(rsp *http.Response) (*GetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagePackageIdDirectoryDirectoryIdFileFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse parses an HTTP response from a DeletePackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse call
func ParseDeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse(rsp *http.Response) (*DeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePackagePackageIdDirectoryDirectoryIdFileFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse parses an HTTP response from a PostPackagePackageIdDirectoryDirectoryIdFileFileIdWithResponse call
func ParsePostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse(rsp *http.Response) (*PostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPackagePackageIdDirectoryDirectoryIdFileFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MoveWorkspaceFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse parses an HTTP response from a PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsWithResponse call
func ParsePostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse(rsp *http.Response) (*PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPackagePackageIdDirectoryDirectoryIdFileFileIdDownloadUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDownloadUrlsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse parses an HTTP response from a PutPackagePackageIdDirectoryDirectoryIdSubdirectoryWithResponse call
func ParsePutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse(rsp *http.Response) (*PutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPackagePackageIdDirectoryDirectoryIdSubdirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateDirectoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFileResponse parses an HTTP response from a CreateFileWithResponse call
func ParseCreateFileResponse(rsp *http.Response) (*CreateFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateFileResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePackagePackageIdFileFileIdResponse parses an HTTP response from a DeletePackagePackageIdFileFileIdWithResponse call
func ParseDeletePackagePackageIdFileFileIdResponse(rsp *http.Response) (*DeletePackagePackageIdFileFileIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePackagePackageIdFileFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackagePackageIdFileFileIdResponse parses an HTTP response from a GetPackagePackageIdFileFileIdWithResponse call
func ParseGetPackagePackageIdFileFileIdResponse(rsp *http.Response) (*GetPackagePackageIdFileFileIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagePackageIdFileFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPackagePackageIdFileFileIdCopyResponse parses an HTTP response from a PostPackagePackageIdFileFileIdCopyWithResponse call
func ParsePostPackagePackageIdFileFileIdCopyResponse(rsp *http.Response) (*PostPackagePackageIdFileFileIdCopyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPackagePackageIdFileFileIdCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPackagePackageIdFileFileIdDownloadUrlsResponse parses an HTTP response from a PostPackagePackageIdFileFileIdDownloadUrlsWithResponse call
func ParsePostPackagePackageIdFileFileIdDownloadUrlsResponse(rsp *http.Response) (*PostPackagePackageIdFileFileIdDownloadUrlsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPackagePackageIdFileFileIdDownloadUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDownloadUrlsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadCompleteResponse parses an HTTP response from a UploadCompleteWithResponse call
func ParseUploadCompleteResponse(rsp *http.Response) (*UploadCompleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadCompleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadCompletedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUploadUrlsResponse parses an HTTP response from a GetUploadUrlsWithResponse call
func ParseGetUploadUrlsResponse(rsp *http.Response) (*GetUploadUrlsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUploadUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUploadUrlsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFinalizePackageResponse parses an HTTP response from a FinalizePackageWithResponse call
func ParseFinalizePackageResponse(rsp *http.Response) (*FinalizePackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FinalizePackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FinalizePackageResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePackagePackageIdGroupGroupIdResponse parses an HTTP response from a DeletePackagePackageIdGroupGroupIdWithResponse call
func ParseDeletePackagePackageIdGroupGroupIdResponse(rsp *http.Response) (*DeletePackagePackageIdGroupGroupIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePackagePackageIdGroupGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPackagePackageIdGroupGroupIdResponse parses an HTTP response from a PutPackagePackageIdGroupGroupIdWithResponse call
func ParsePutPackagePackageIdGroupGroupIdResponse(rsp *http.Response) (*PutPackagePackageIdGroupGroupIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPackagePackageIdGroupGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddContactGroupToPackageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackagePackageIdLinkPublicKeyIdResponse parses an HTTP response from a GetPackagePackageIdLinkPublicKeyIdWithResponse call
func ParseGetPackagePackageIdLinkPublicKeyIdResponse(rsp *http.Response) (*GetPackagePackageIdLinkPublicKeyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagePackageIdLinkPublicKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddKeyCodeToPackageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPackagePackageIdLinkPublicKeyIdResponse parses an HTTP response from a PutPackagePackageIdLinkPublicKeyIdWithResponse call
func ParsePutPackagePackageIdLinkPublicKeyIdResponse(rsp *http.Response) (*PutPackagePackageIdLinkPublicKeyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPackagePackageIdLinkPublicKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadEncryptedMessageResponse parses an HTTP response from a UploadEncryptedMessageWithResponse call
func ParseUploadEncryptedMessageResponse(rsp *http.Response) (*UploadEncryptedMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadEncryptedMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadEncryptedMessageResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackagePackageIdMessageChecksumResponse parses an HTTP response from a GetPackagePackageIdMessageChecksumWithResponse call
func ParseGetPackagePackageIdMessageChecksumResponse(rsp *http.Response) (*GetPackagePackageIdMessageChecksumResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagePackageIdMessageChecksumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPackageMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse parses an HTTP response from a PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdWithResponse call
func ParsePostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse(rsp *http.Response) (*PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPackagePackageIdMoveSourcedirectoryIdTargetdirectoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackagePackageIdPublicKeysResponse parses an HTTP response from a GetPackagePackageIdPublicKeysWithResponse call
func ParseGetPackagePackageIdPublicKeysResponse(rsp *http.Response) (*GetPackagePackageIdPublicKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagePackageIdPublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPublicKeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddRecipientResponse parses an HTTP response from a AddRecipientWithResponse call
func ParseAddRecipientResponse(rsp *http.Response) (*AddRecipientResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRecipientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddRecipientResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePackagePackageIdRecipientRecipientIdResponse parses an HTTP response from a DeletePackagePackageIdRecipientRecipientIdWithResponse call
func ParseDeletePackagePackageIdRecipientRecipientIdResponse(rsp *http.Response) (*DeletePackagePackageIdRecipientRecipientIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePackagePackageIdRecipientRecipientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackagePackageIdRecipientRecipientIdResponse parses an HTTP response from a GetPackagePackageIdRecipientRecipientIdWithResponse call
func ParseGetPackagePackageIdRecipientRecipientIdResponse(rsp *http.Response) (*GetPackagePackageIdRecipientRecipientIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagePackageIdRecipientRecipientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddRecipientResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPackagePackageIdRecipientRecipientIdResponse parses an HTTP response from a PostPackagePackageIdRecipientRecipientIdWithResponse call
func ParsePostPackagePackageIdRecipientRecipientIdResponse(rsp *http.Response) (*PostPackagePackageIdRecipientRecipientIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPackagePackageIdRecipientRecipientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddRecipientResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPackagePackageIdRecipientsResponse parses an HTTP response from a PutPackagePackageIdRecipientsWithResponse call
func ParsePutPackagePackageIdRecipientsResponse(rsp *http.Response) (*PutPackagePackageIdRecipientsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPackagePackageIdRecipientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddRecipientsToPackageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePackagePackageIdTempResponse parses an HTTP response from a DeletePackagePackageIdTempWithResponse call
func ParseDeletePackagePackageIdTempResponse(rsp *http.Response) (*DeletePackagePackageIdTempResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePackagePackageIdTempResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackagePackageIdRecipientIdPublicKeysResponse parses an HTTP response from a GetPackagePackageIdRecipientIdPublicKeysWithResponse call
func ParseGetPackagePackageIdRecipientIdPublicKeysResponse(rsp *http.Response) (*GetPackagePackageIdRecipientIdPublicKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagePackageIdRecipientIdPublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPublicKeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPublicKeyResponse parses an HTTP response from a PutPublicKeyWithResponse call
func ParsePutPublicKeyResponse(rsp *http.Response) (*PutPublicKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddPublicKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePublicKeyPublicKeyIdResponse parses an HTTP response from a DeletePublicKeyPublicKeyIdWithResponse call
func ParseDeletePublicKeyPublicKeyIdResponse(rsp *http.Response) (*DeletePublicKeyPublicKeyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePublicKeyPublicKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicKeyPublicKeyIdResponse parses an HTTP response from a GetPublicKeyPublicKeyIdWithResponse call
func ParseGetPublicKeyPublicKeyIdResponse(rsp *http.Response) (*GetPublicKeyPublicKeyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicKeyPublicKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPublicKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecipientHistoryRecipientEmailResponse parses an HTTP response from a GetRecipientHistoryRecipientEmailWithResponse call
func ParseGetRecipientHistoryRecipientEmailResponse(rsp *http.Response) (*GetRecipientHistoryRecipientEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipientHistoryRecipientEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRecipientHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSyncPublicKeyIdResponse parses an HTTP response from a GetSyncPublicKeyIdWithResponse call
func ParseGetSyncPublicKeyIdResponse(rsp *http.Response) (*GetSyncPublicKeyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSyncPublicKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SyncKeycodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUserInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserDropzoneRecipientsResponse parses an HTTP response from a DeleteUserDropzoneRecipientsWithResponse call
func ParseDeleteUserDropzoneRecipientsResponse(rsp *http.Response) (*DeleteUserDropzoneRecipientsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserDropzoneRecipientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteDropzoneRecipientResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserDropzoneRecipientsResponse parses an HTTP response from a GetUserDropzoneRecipientsWithResponse call
func ParseGetUserDropzoneRecipientsResponse(rsp *http.Response) (*GetUserDropzoneRecipientsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserDropzoneRecipientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDropzoneRecipientsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserDropzoneRecipientsResponse parses an HTTP response from a PutUserDropzoneRecipientsWithResponse call
func ParsePutUserDropzoneRecipientsResponse(rsp *http.Response) (*PutUserDropzoneRecipientsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserDropzoneRecipientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddDropzoneRecipientsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserGroupsResponse parses an HTTP response from a GetUserGroupsWithResponse call
func ParseGetUserGroupsResponse(rsp *http.Response) (*GetUserGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUserContactGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserUserIdDropzoneConfigResponse parses an HTTP response from a PostUserUserIdDropzoneConfigWithResponse call
func ParsePostUserUserIdDropzoneConfigResponse(rsp *http.Response) (*PostUserUserIdDropzoneConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdDropzoneConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateDropzoneConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
